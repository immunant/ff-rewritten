#ifndef __ASSEMBLER__

#include <ia2.h>
#include <scrub_registers.h>

#define IA2_TYPE__ZTSPFN2JS6HandleIP8JSObjectEEP9JSContextE class JS::Handle<class JSObject *> (*)(void *, struct JSContext *)
#define IA2_TYPE__ZTSPFP20jvirt_barray_controlP18jpeg_common_structiijjjE struct jvirt_barray_control *(*)(void *, struct jpeg_common_struct *, int, int, unsigned int, unsigned int, unsigned int)
#define IA2_TYPE__ZTSPFP20jvirt_sarray_controlP18jpeg_common_structiijjjE struct jvirt_sarray_control *(*)(void *, struct jpeg_common_struct *, int, int, unsigned int, unsigned int, unsigned int)
#define IA2_TYPE__ZTSPFP8JSObjectP9JSContextE class JSObject *(*)(void *, struct JSContext *)
#define IA2_TYPE__ZTSPFPPA64_sP18jpeg_common_structP20jvirt_barray_controljjiE short (**(*)(void *, struct jpeg_common_struct *, struct jvirt_barray_control *, unsigned int, unsigned int, int))[64]
#define IA2_TYPE__ZTSPFPPhP18jpeg_common_structP20jvirt_sarray_controljjiE unsigned char **(*)(void *, struct jpeg_common_struct *, struct jvirt_sarray_control *, unsigned int, unsigned int, int)
#define IA2_TYPE__ZTSPFPPhP18jpeg_common_structijjE unsigned char **(*)(void *, struct jpeg_common_struct *, int, unsigned int, unsigned int)
#define IA2_TYPE__ZTSPFPvP18jpeg_common_structimE void *(*)(void *, struct jpeg_common_struct *, int, unsigned long)
#define IA2_TYPE__ZTSPFbN2JS6HandleINS_5ValueEEEE _Bool (*)(void *, class JS::Handle<class JS::Value>)
#define IA2_TYPE__ZTSPFbP9JSContextRKN2JS8CallArgsEE _Bool (*)(void *, struct JSContext *, const class JS::CallArgs &)
#define IA2_TYPE__ZTSPFiP20jpeg_compress_structE int (*)(void *, struct jpeg_compress_struct *)
#define IA2_TYPE__ZTSPFiP20jpeg_compress_structPPA64_sE int (*)(void *, struct jpeg_compress_struct *, short (**)[64])
#define IA2_TYPE__ZTSPFiP20jpeg_compress_structPPPhE int (*)(void *, struct jpeg_compress_struct *, unsigned char ***)
#define IA2_TYPE__ZTSPFiP20jpeg_compress_structPPPsE int (*)(void *, struct jpeg_compress_struct *, short ***)
#define IA2_TYPE__ZTSPFiP20jpeg_compress_structPPPtE int (*)(void *, struct jpeg_compress_struct *, unsigned short ***)
#define IA2_TYPE__ZTSPFiP22jpeg_decompress_structE int (*)(void *, struct jpeg_decompress_struct *)
#define IA2_TYPE__ZTSPFiP22jpeg_decompress_structPPA64_sE int (*)(void *, struct jpeg_decompress_struct *, short (**)[64])
#define IA2_TYPE__ZTSPFiP22jpeg_decompress_structPPPhE int (*)(void *, struct jpeg_decompress_struct *, unsigned char ***)
#define IA2_TYPE__ZTSPFiP22jpeg_decompress_structPPPsE int (*)(void *, struct jpeg_decompress_struct *, short ***)
#define IA2_TYPE__ZTSPFiP22jpeg_decompress_structPPPtE int (*)(void *, struct jpeg_decompress_struct *, unsigned short ***)
#define IA2_TYPE__ZTSPFiP22jpeg_decompress_structiE int (*)(void *, struct jpeg_decompress_struct *, int)
#define IA2_TYPE__ZTSPFiPKsPKiiiPtPmE int (*)(void *, const short *, const int *, int, int, unsigned short *, unsigned long *)
#define IA2_TYPE__ZTSPFjP20jpeg_compress_structPPPijjjE unsigned int (*)(void *, struct jpeg_compress_struct *, int ***, unsigned int, unsigned int, unsigned int)
#define IA2_TYPE__ZTSPFjP22jpeg_decompress_structPPPijjjE unsigned int (*)(void *, struct jpeg_decompress_struct *, int ***, unsigned int, unsigned int, unsigned int)
#define IA2_TYPE__ZTSPFvP18jpeg_common_structE void (*)(void *, struct jpeg_common_struct *)
#define IA2_TYPE__ZTSPFvP18jpeg_common_structP20backing_store_structE void (*)(void *, struct jpeg_common_struct *, struct backing_store_struct *)
#define IA2_TYPE__ZTSPFvP18jpeg_common_structP20backing_store_structPvllE void (*)(void *, struct jpeg_common_struct *, struct backing_store_struct *, void *, long, long)
#define IA2_TYPE__ZTSPFvP18jpeg_common_structPcE void (*)(void *, struct jpeg_common_struct *, char *)
#define IA2_TYPE__ZTSPFvP18jpeg_common_structiE void (*)(void *, struct jpeg_common_struct *, int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_struct10J_BUF_MODEE void (*)(void *, struct jpeg_compress_struct *, J_BUF_MODE)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structE void (*)(void *, struct jpeg_compress_struct *)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structP19jpeg_component_infoPPhPA64_sjjjE void (*)(void *, struct jpeg_compress_struct *, jpeg_component_info *, unsigned char **, short (*)[64], unsigned int, unsigned int, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structP19jpeg_component_infoPPhS4_E void (*)(void *, struct jpeg_compress_struct *, jpeg_component_info *, unsigned char **, unsigned char **)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structP19jpeg_component_infoPPsPA64_sjjjE void (*)(void *, struct jpeg_compress_struct *, jpeg_component_info *, short **, short (*)[64], unsigned int, unsigned int, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structP19jpeg_component_infoPPsS4_E void (*)(void *, struct jpeg_compress_struct *, jpeg_component_info *, short **, short **)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structP19jpeg_component_infoPPtS4_E void (*)(void *, struct jpeg_compress_struct *, jpeg_component_info *, unsigned short **, unsigned short **)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPPhjS3_jE void (*)(void *, struct jpeg_compress_struct *, unsigned char ***, unsigned int, unsigned char ***, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPPsjS3_jE void (*)(void *, struct jpeg_compress_struct *, short ***, unsigned int, short ***, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPPtjS3_jE void (*)(void *, struct jpeg_compress_struct *, unsigned short ***, unsigned int, unsigned short ***, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPhPS2_jiE void (*)(void *, struct jpeg_compress_struct *, unsigned char **, unsigned char ***, unsigned int, int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPhPjjE void (*)(void *, struct jpeg_compress_struct *, unsigned char **, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPhPjjPS2_S3_jE void (*)(void *, struct jpeg_compress_struct *, unsigned char **, unsigned int *, unsigned int, unsigned char ***, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPsPS2_jiE void (*)(void *, struct jpeg_compress_struct *, short **, short ***, unsigned int, int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPsPjjE void (*)(void *, struct jpeg_compress_struct *, short **, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPsPjjPS2_S3_jE void (*)(void *, struct jpeg_compress_struct *, short **, unsigned int *, unsigned int, short ***, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPtPS2_jiE void (*)(void *, struct jpeg_compress_struct *, unsigned short **, unsigned short ***, unsigned int, int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPtPjjE void (*)(void *, struct jpeg_compress_struct *, unsigned short **, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPPtPjjPS2_S3_jE void (*)(void *, struct jpeg_compress_struct *, unsigned short **, unsigned int *, unsigned int, unsigned short ***, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPhS1_jE void (*)(void *, struct jpeg_compress_struct *, unsigned char *, unsigned char *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPsS1_jE void (*)(void *, struct jpeg_compress_struct *, short *, short *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structPtS1_jE void (*)(void *, struct jpeg_compress_struct *, unsigned short *, unsigned short *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structiE void (*)(void *, struct jpeg_compress_struct *, int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structiPhS1_PijE void (*)(void *, struct jpeg_compress_struct *, int, unsigned char *, unsigned char *, int *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structiPsS1_PijE void (*)(void *, struct jpeg_compress_struct *, int, short *, short *, int *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structiPtS1_PijE void (*)(void *, struct jpeg_compress_struct *, int, unsigned short *, unsigned short *, int *, unsigned int)
#define IA2_TYPE__ZTSPFvP20jpeg_compress_structijE void (*)(void *, struct jpeg_compress_struct *, int, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_struct10J_BUF_MODEE void (*)(void *, struct jpeg_decompress_struct *, J_BUF_MODE)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structE void (*)(void *, struct jpeg_decompress_struct *)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E void (*)(void *, struct jpeg_decompress_struct *, jpeg_component_info *, unsigned char **, unsigned char ***)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structP19jpeg_component_infoPPsPS4_E void (*)(void *, struct jpeg_decompress_struct *, jpeg_component_info *, short **, short ***)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structP19jpeg_component_infoPPtPS4_E void (*)(void *, struct jpeg_decompress_struct *, jpeg_component_info *, unsigned short **, unsigned short ***)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE void (*)(void *, struct jpeg_decompress_struct *, jpeg_component_info *, short *, unsigned char **, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE void (*)(void *, struct jpeg_decompress_struct *, jpeg_component_info *, short *, short **, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPPhPjjS2_S4_jE void (*)(void *, struct jpeg_decompress_struct *, unsigned char ***, unsigned int *, unsigned int, unsigned char **, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPPhjS2_E void (*)(void *, struct jpeg_decompress_struct *, unsigned char ***, unsigned int, unsigned char **)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPPhjS2_iE void (*)(void *, struct jpeg_decompress_struct *, unsigned char ***, unsigned int, unsigned char **, int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPPsPjjS2_S4_jE void (*)(void *, struct jpeg_decompress_struct *, short ***, unsigned int *, unsigned int, short **, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPPsjS2_E void (*)(void *, struct jpeg_decompress_struct *, short ***, unsigned int, short **)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPPsjS2_iE void (*)(void *, struct jpeg_decompress_struct *, short ***, unsigned int, short **, int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPPtPjjS2_S4_jE void (*)(void *, struct jpeg_decompress_struct *, unsigned short ***, unsigned int *, unsigned int, unsigned short **, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPPtjS2_iE void (*)(void *, struct jpeg_decompress_struct *, unsigned short ***, unsigned int, unsigned short **, int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPhPjjE void (*)(void *, struct jpeg_decompress_struct *, unsigned char **, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPhS2_iE void (*)(void *, struct jpeg_decompress_struct *, unsigned char **, unsigned char **, int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPsPjjE void (*)(void *, struct jpeg_decompress_struct *, short **, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPsS2_iE void (*)(void *, struct jpeg_decompress_struct *, short **, short **, int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPPtPjjE void (*)(void *, struct jpeg_decompress_struct *, unsigned short **, unsigned int *, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPiPhjE void (*)(void *, struct jpeg_decompress_struct *, int *, unsigned char *, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPiPsjE void (*)(void *, struct jpeg_decompress_struct *, int *, short *, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structPiPtjE void (*)(void *, struct jpeg_decompress_struct *, int *, unsigned short *, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structiE void (*)(void *, struct jpeg_decompress_struct *, int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structiPiS1_S1_jE void (*)(void *, struct jpeg_decompress_struct *, int, int *, int *, int *, unsigned int)
#define IA2_TYPE__ZTSPFvP22jpeg_decompress_structlE void (*)(void *, struct jpeg_decompress_struct *, long)
#define IA2_TYPE__ZTSPFvPKsPKiiiPtPmE void (*)(void *, const short *, const int *, int, int, unsigned short *, unsigned long *)
#define IA2_TYPE__ZTSPFvPPhjPfE void (*)(void *, unsigned char **, unsigned int, float *)
#define IA2_TYPE__ZTSPFvPPhjPsE void (*)(void *, unsigned char **, unsigned int, short *)
#define IA2_TYPE__ZTSPFvPPsjPfE void (*)(void *, short **, unsigned int, float *)
#define IA2_TYPE__ZTSPFvPPsjPlE void (*)(void *, short **, unsigned int, long *)
#define IA2_TYPE__ZTSPFvPfE void (*)(void *, float *)
#define IA2_TYPE__ZTSPFvPlE void (*)(void *, long *)
#define IA2_TYPE__ZTSPFvPsE void (*)(void *, short *)
#define IA2_TYPE__ZTSPFvPsPfS0_E void (*)(void *, short *, float *, float *)
#define IA2_TYPE__ZTSPFvPsPlS0_E void (*)(void *, short *, long *, long *)
#define IA2_TYPE__ZTSPFvPsS_S_E void (*)(void *, short *, short *, short *)
#define IA2_TYPE__ZTSPFvRN7mozilla24ProfileBufferEntryReaderERNS_12baseprofiler20SpliceableJSONWriterEE void (*)(void *, class mozilla::ProfileBufferEntryReader &, class mozilla::baseprofiler::SpliceableJSONWriter &)
#define IA2_TYPE__ZTSPFvjPPPhjS0_E void (*)(void *, unsigned int, unsigned char ***, unsigned int, unsigned char **)
#define IA2_TYPE__ZTSPFvjPPPhjS0_iE void (*)(void *, unsigned int, unsigned char ***, unsigned int, unsigned char **, int)
#define IA2_TYPE__ZTSPFvjPPhPS0_jiE void (*)(void *, unsigned int, unsigned char **, unsigned char ***, unsigned int, int)
extern char __ia2_indirect_callgate__ZTSPFN2JS6HandleIP8JSObjectEEP9JSContextE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFP20jvirt_barray_controlP18jpeg_common_structiijjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFP20jvirt_sarray_controlP18jpeg_common_structiijjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFP8JSObjectP9JSContextE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFPPA64_sP18jpeg_common_structP20jvirt_barray_controljjiE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFPPhP18jpeg_common_structP20jvirt_sarray_controljjiE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFPPhP18jpeg_common_structijjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFPvP18jpeg_common_structimE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFbN2JS6HandleINS_5ValueEEEE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFbP9JSContextRKN2JS8CallArgsEE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiP20jpeg_compress_structE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiP20jpeg_compress_structPPA64_sE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiP20jpeg_compress_structPPPhE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiP20jpeg_compress_structPPPsE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiP20jpeg_compress_structPPPtE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiP22jpeg_decompress_structE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiP22jpeg_decompress_structPPA64_sE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiP22jpeg_decompress_structPPPhE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiP22jpeg_decompress_structPPPsE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiP22jpeg_decompress_structPPPtE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiP22jpeg_decompress_structiE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFiPKsPKiiiPtPmE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFjP20jpeg_compress_structPPPijjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFjP22jpeg_decompress_structPPPijjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP18jpeg_common_structE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP18jpeg_common_structP20backing_store_structE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP18jpeg_common_structP20backing_store_structPvllE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP18jpeg_common_structPcE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP18jpeg_common_structiE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_struct10J_BUF_MODEE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structP19jpeg_component_infoPPhPA64_sjjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structP19jpeg_component_infoPPhS4_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structP19jpeg_component_infoPPsPA64_sjjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structP19jpeg_component_infoPPsS4_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structP19jpeg_component_infoPPtS4_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPPhjS3_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPPsjS3_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPPtjS3_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPhPS2_jiE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPhPjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPhPjjPS2_S3_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPsPS2_jiE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPsPjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPsPjjPS2_S3_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPtPS2_jiE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPtPjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPPtPjjPS2_S3_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPhS1_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPsS1_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structPtS1_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structiE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structiPhS1_PijE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structiPsS1_PijE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structiPtS1_PijE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP20jpeg_compress_structijE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_struct10J_BUF_MODEE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structP19jpeg_component_infoPPsPS4_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structP19jpeg_component_infoPPtPS4_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPPhPjjS2_S4_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPPhjS2_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPPhjS2_iE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPPsPjjS2_S4_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPPsjS2_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPPsjS2_iE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPPtPjjS2_S4_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPPtjS2_iE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPhPjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPhS2_iE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPsPjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPsS2_iE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPPtPjjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPiPhjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPiPsjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structPiPtjE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structiE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structiPiS1_S1_jE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvP22jpeg_decompress_structlE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvPKsPKiiiPtPmE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvPPhjPfE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvPPhjPsE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvPPsjPfE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvPPsjPlE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvPfE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvPlE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvPsE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvPsPfS0_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvPsPlS0_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvPsS_S_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvRN7mozilla24ProfileBufferEntryReaderERNS_12baseprofiler20SpliceableJSONWriterEE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvjPPPhjS0_E_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvjPPPhjS0_iE_pkey_1;
extern char __ia2_indirect_callgate__ZTSPFvjPPhPS0_jiE_pkey_1;
struct IA2_fnptr__ZTSF13nsEventStatusPN7mozilla14WidgetGUIEventEE { char *ptr; };
struct IA2_fnptr__ZTSF14purge_result_tS_bjRKN7mozilla5MaybeISt8functionIFbvEEEEE { char *ptr; };
struct IA2_fnptr__ZTSF16GeckoFontMetricsPvE { char *ptr; };
struct IA2_fnptr__ZTSF16PRTimeParametersPK14PRExplodedTimeE { char *ptr; };
struct IA2_fnptr__ZTSF18nsCheapSetOperatorP17nsIntegralHashKeyIjLi0EEPvE { char *ptr; };
struct IA2_fnptr__ZTSF18nsCheapSetOperatorPT_PvE { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusP10PRFileDescE { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusP10PRFileDescP10PRFileInfoE { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusP10PRFileDescP12PRFileInfo64E { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusP10PRFileDescP18PRSocketOptionDataE { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusP10PRFileDescP9PRNetAddrE { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusP10PRFileDescPK18PRSocketOptionDataE { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusP10PRFileDescPK9PRNetAddrE { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusP10PRFileDescPK9PRNetAddrjE { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusP10PRFileDesciE { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusP10PRFileDescsE { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusPvE { char *ptr; };
struct IA2_fnptr__ZTSF8PRStatusvE { char *ptr; };
struct IA2_fnptr__ZTSF8nsresultN2JS6HandleINS0_5ValueEEEPPvP9JSContextE { char *ptr; };
struct IA2_fnptr__ZTSF8nsresultP14nsIInputStreamPvPKcjjPjE { char *ptr; };
struct IA2_fnptr__ZTSF8nsresultP15nsIOutputStreamPvPcjjPjE { char *ptr; };
struct IA2_fnptr__ZTSF8nsresultP18nsPIDOMWindowOuterPmS2_S2_E { char *ptr; };
struct IA2_fnptr__ZTSF8nsresultP8JSObjectPmS2_S2_S2_E { char *ptr; };
struct IA2_fnptr__ZTSFN2JS11SliceBudgetENS_8GCReasonElE { char *ptr; };
struct IA2_fnptr__ZTSFN2JS21CompartmentIterResultEP9JSContextPvPNS_11CompartmentEE { char *ptr; };
struct IA2_fnptr__ZTSFN2JS6HandleIP8JSObjectEEP9JSContextE { char *ptr; };
struct IA2_fnptr__ZTSFN7mozilla12MarkerSchemaEvE { char *ptr; };
struct IA2_fnptr__ZTSFN7mozilla3gfx12IntRectTypedINS0_12UnknownUnitsEEEPKhiPhRKNS0_12IntSizeTypedIS2_EEiE { char *ptr; };
struct IA2_fnptr__ZTSFN7mozilla4SpanIKcLm18446744073709551615EEEvE { char *ptr; };
struct IA2_fnptr__ZTSFP10PRFileDescS0_P9PRNetAddrjE { char *ptr; };
struct IA2_fnptr__ZTSFP14ProfilingStackPKcPvE { char *ptr; };
struct IA2_fnptr__ZTSFP14nsWrapperCacheP8JSObjectE { char *ptr; };
struct IA2_fnptr__ZTSFP20jvirt_barray_controlP18jpeg_common_structiijjjE { char *ptr; };
struct IA2_fnptr__ZTSFP20jvirt_sarray_controlP18jpeg_common_structiijjjE { char *ptr; };
struct IA2_fnptr__ZTSFP8JSObjectP9JSContext10JSProtoKeyE { char *ptr; };
struct IA2_fnptr__ZTSFP8JSObjectP9JSContextE { char *ptr; };
struct IA2_fnptr__ZTSFP8JSObjectP9JSContextN2JS6HandleIS0_EEE { char *ptr; };
struct IA2_fnptr__ZTSFP8JSObjectP9JSContextN2JS6HandleIS0_EES5_E { char *ptr; };
struct IA2_fnptr__ZTSFP8JSObjectP9JSContextP15nsIGlobalObjectP23JSStructuredCloneReaderE { char *ptr; };
struct IA2_fnptr__ZTSFP8JSObjectP9JSContextP23JSStructuredCloneReaderRKN2JS15CloneDataPolicyEjjPvE { char *ptr; };
struct IA2_fnptr__ZTSFP8JSStringP9JSContextN2JS6HandleIP8JSObjectEEbE { char *ptr; };
struct IA2_fnptr__ZTSFPK19JSErrorFormatStringPvjE { char *ptr; };
struct IA2_fnptr__ZTSFPPA64_sP18jpeg_common_structP20jvirt_barray_controljjiE { char *ptr; };
struct IA2_fnptr__ZTSFPPA64_sP18jpeg_common_structijjE { char *ptr; };
struct IA2_fnptr__ZTSFPPhP18jpeg_common_structP20jvirt_sarray_controljjiE { char *ptr; };
struct IA2_fnptr__ZTSFPPhP18jpeg_common_structijjE { char *ptr; };
struct IA2_fnptr__ZTSFPvP18jpeg_common_structimE { char *ptr; };
struct IA2_fnptr__ZTSFPvPhE { char *ptr; };
struct IA2_fnptr__ZTSFPvS_S_E { char *ptr; };
struct IA2_fnptr__ZTSFPvS_S_mE { char *ptr; };
struct IA2_fnptr__ZTSFPvS_mE { char *ptr; };
struct IA2_fnptr__ZTSFPvS_mS_mE { char *ptr; };
struct IA2_fnptr__ZTSFPvS_mmE { char *ptr; };
struct IA2_fnptr__ZTSFPvS_mmmE { char *ptr; };
struct IA2_fnptr__ZTSFT_S_DpT0_E { char *ptr; };
struct IA2_fnptr__ZTSFbN2JS6HandleINS_5ValueEEEE { char *ptr; };
struct IA2_fnptr__ZTSFbN2JS6HandleIP8JSObjectEEE { char *ptr; };
struct IA2_fnptr__ZTSFbP12JSPrincipalsS0_E { char *ptr; };
struct IA2_fnptr__ZTSFbP8JSTracerRN2JS11SliceBudgetEPvE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS11RuntimeCodeENS1_6HandleIP8JSStringEENS1_15CompilationTypeENS3_INS1_13StackGCVectorIS5_N2js15TempAllocPolicyEEEEES6_NS3_INS8_INS1_5ValueESA_EEEENS3_ISD_EEPbE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleINS1_5ValueEEEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEENS1_13MutableHandleINS1_13StackGCVectorINS1_11PropertyKeyEN2js15TempAllocPolicyEEEEEbE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEENS1_13MutableHandleIP8JSStringEEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEENS1_8MimeTypeEPNS1_14StreamConsumerEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEENS2_INS1_11PropertyKeyEEENS1_13MutableHandleIN7mozilla5MaybeINS1_18PropertyDescriptorEEEEEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEENS2_INS1_11PropertyKeyEEENS1_13MutableHandleIS4_EEPN2js14PropertyResultEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEENS2_INS1_11PropertyKeyEEENS2_INS1_18PropertyDescriptorEEERNS1_14ObjectOpResultEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEENS2_INS1_11PropertyKeyEEENS2_INS1_5ValueEEEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEENS2_INS1_11PropertyKeyEEENS2_INS1_5ValueEEES9_RNS1_14ObjectOpResultEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEENS2_INS1_11PropertyKeyEEEPbE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEENS2_INS1_11PropertyKeyEEERNS1_14ObjectOpResultEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEENS2_INS1_5ValueEEENS2_INS1_11PropertyKeyEEENS1_13MutableHandleIS6_EEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEEPbPvE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEEPv19JSJitGetterCallArgsE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEEPv19JSJitSetterCallArgsE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEEPvPjPNS1_21TransferableOwnershipEPS6_PmE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEEPvRK19JSJitMethodCallArgsE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEES5_E { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEES5_NS1_13MutableHandleINS1_13StackGCVectorINS1_11PropertyKeyEN2js15TempAllocPolicyEEEEEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEES5_NS2_INS1_11PropertyKeyEEENS1_13MutableHandleIN7mozilla5MaybeINS1_18PropertyDescriptorEEEEEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEES5_NS2_INS1_11PropertyKeyEEERNS1_14ObjectOpResultEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextN2JS6HandleIP8JSObjectEEjjPN2js12ElementAdderEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextP23JSStructuredCloneReaderPP12JSPrincipalsE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextP23JSStructuredCloneReaderRKN2JS15CloneDataPolicyEjPvmS7_NS3_13MutableHandleIP8JSObjectEEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextP23JSStructuredCloneWriterN2JS6HandleIP8JSObjectEEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextP23JSStructuredCloneWriterN2JS6HandleIP8JSObjectEEPbPvE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextP8JSObjectE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextPKcE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextPvN2JS13MutableHandleINS2_5ValueEEEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextRKN2JS8CallArgsEE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextbPvE { char *ptr; };
struct IA2_fnptr__ZTSFbP9JSContextjPN2JS5ValueEE { char *ptr; };
struct IA2_fnptr__ZTSFbPK15PLDHashEntryHdrPKvE { char *ptr; };
struct IA2_fnptr__ZTSFbPK7JSClassE { char *ptr; };
struct IA2_fnptr__ZTSFbPK7JSClassjjE { char *ptr; };
struct IA2_fnptr__ZTSFbPKhmS0_mPvE { char *ptr; };
struct IA2_fnptr__ZTSFbPKhmbbbPvE { char *ptr; };
struct IA2_fnptr__ZTSFbPN7mozilla6VectorIcLm0EN2js17SystemAllocPolicyEEEE { char *ptr; };
struct IA2_fnptr__ZTSFbRK11JSAtomStateN2JS11PropertyKeyEP8JSObjectE { char *ptr; };
struct IA2_fnptr__ZTSFbRKN7mozilla6layers19ScrollableLayerGuidES3_E { char *ptr; };
struct IA2_fnptr__ZTSFbRN7mozilla20ProfileChunkedBufferENS_19StackCaptureOptionsEE { char *ptr; };
struct IA2_fnptr__ZTSFbbbE { char *ptr; };
struct IA2_fnptr__ZTSFbjPvE { char *ptr; };
struct IA2_fnptr__ZTSFbvE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDescE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDescP14PRSendFileData19PRTransmitFileFlagsjE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDescPK7PRIOVecijE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDescPKviE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDescPKviiPK9PRNetAddrjE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDescPKviijE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDescPS0_PP9PRNetAddrPvijE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDescPviE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDescPviiP9PRNetAddrjE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDescPviijE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDescS0_PKvi19PRTransmitFileFlagsjE { char *ptr; };
struct IA2_fnptr__ZTSFiP10PRFileDesci12PRSeekWhenceE { char *ptr; };
struct IA2_fnptr__ZTSFiP20jpeg_compress_structE { char *ptr; };
struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPA64_sE { char *ptr; };
struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPhE { char *ptr; };
struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPsE { char *ptr; };
struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPtE { char *ptr; };
struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE { char *ptr; };
struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPA64_sE { char *ptr; };
struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPhE { char *ptr; };
struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPsE { char *ptr; };
struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPtE { char *ptr; };
struct IA2_fnptr__ZTSFiP22jpeg_decompress_structiE { char *ptr; };
struct IA2_fnptr__ZTSFiPKT_S1_mmE { char *ptr; };
struct IA2_fnptr__ZTSFiPKcE { char *ptr; };
struct IA2_fnptr__ZTSFiPKsPKiiiPtPmE { char *ptr; };
struct IA2_fnptr__ZTSFiPvPKcjE { char *ptr; };
struct IA2_fnptr__ZTSFiiPPcE { char *ptr; };
struct IA2_fnptr__ZTSFiiPPvmmE { char *ptr; };
struct IA2_fnptr__ZTSFjP20jpeg_compress_structPPPijjjE { char *ptr; };
struct IA2_fnptr__ZTSFjP22jpeg_decompress_structPPPijjjE { char *ptr; };
struct IA2_fnptr__ZTSFjPKvE { char *ptr; };
struct IA2_fnptr__ZTSFjPKviE { char *ptr; };
struct IA2_fnptr__ZTSFlP10PRFileDescE { char *ptr; };
struct IA2_fnptr__ZTSFlP10PRFileDescl12PRSeekWhenceE { char *ptr; };
struct IA2_fnptr__ZTSFlvE { char *ptr; };
struct IA2_fnptr__ZTSFmP8JSObjectS0_E { char *ptr; };
struct IA2_fnptr__ZTSFmPFmPKvEPN2JS11CompartmentEE { char *ptr; };
struct IA2_fnptr__ZTSFmPKvE { char *ptr; };
struct IA2_fnptr__ZTSFmmE { char *ptr; };
struct IA2_fnptr__ZTSFmmP14arena_params_sE { char *ptr; };
struct IA2_fnptr__ZTSFmmPvE { char *ptr; };
struct IA2_fnptr__ZTSFmmmE { char *ptr; };
struct IA2_fnptr__ZTSFsP10PRFileDescsPsE { char *ptr; };
struct IA2_fnptr__ZTSFv10JSGCStatusE { char *ptr; };
struct IA2_fnptr__ZTSFvDpT_E { char *ptr; };
struct IA2_fnptr__ZTSFvN2JS9GCCellPtrEPKcPvE { char *ptr; };
struct IA2_fnptr__ZTSFvN7mozilla14MarkerCategoryEPKcNS_9TimeStampES2_E { char *ptr; };
struct IA2_fnptr__ZTSFvN7mozilla14MarkerCategoryEPKcS2_E { char *ptr; };
struct IA2_fnptr__ZTSFvP10JSFunctionP8JSObjectPvE { char *ptr; };
struct IA2_fnptr__ZTSFvP10PRFileDescE { char *ptr; };
struct IA2_fnptr__ZTSFvP11nsISupportsP7nsINodeE { char *ptr; };
struct IA2_fnptr__ZTSFvP12JSPrincipalsE { char *ptr; };
struct IA2_fnptr__ZTSFvP12PLDHashTableP15PLDHashEntryHdrE { char *ptr; };
struct IA2_fnptr__ZTSFvP12PLDHashTablePK15PLDHashEntryHdrPS1_E { char *ptr; };
struct IA2_fnptr__ZTSFvP12pixman_imagePvE { char *ptr; };
struct IA2_fnptr__ZTSFvP15PLDHashEntryHdrPKvE { char *ptr; };
struct IA2_fnptr__ZTSFvP16jemalloc_stats_tP20jemalloc_bin_stats_tE { char *ptr; };
struct IA2_fnptr__ZTSFvP18jpeg_common_structE { char *ptr; };
struct IA2_fnptr__ZTSFvP18jpeg_common_structP20backing_store_structE { char *ptr; };
struct IA2_fnptr__ZTSFvP18jpeg_common_structP20backing_store_structPvllE { char *ptr; };
struct IA2_fnptr__ZTSFvP18jpeg_common_structPcE { char *ptr; };
struct IA2_fnptr__ZTSFvP18jpeg_common_structiE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_struct10J_BUF_MODEE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhPA64_sjjjE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhS4_E { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPsPA64_sjjjE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPsS4_E { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPtS4_E { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPPhjS3_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPPsjS3_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPPtjS3_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPS2_jiE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPjjE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPjjPS2_S3_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPS2_jiE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPjjE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPjjPS2_S3_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPS2_jiE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPjjE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPjjPS2_S3_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPhS1_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPsS1_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structPtS1_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structiE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPhS1_PijE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPsS1_PijE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPtS1_PijE { char *ptr; };
struct IA2_fnptr__ZTSFvP20jpeg_compress_structijE { char *ptr; };
struct IA2_fnptr__ZTSFvP21jemalloc_stats_lite_tE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_struct10J_BUF_MODEE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPsPS4_E { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPtPS4_E { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhPjjS2_S4_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_E { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsPjjS2_S4_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_E { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtPjjS2_S4_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_E { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhPjjE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhS2_iE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsPjjE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsS2_iE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPtPjjE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPiPhjE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPiPsjE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPiPtjE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiPiS1_S1_jE { char *ptr; };
struct IA2_fnptr__ZTSFvP22jpeg_decompress_structlE { char *ptr; };
struct IA2_fnptr__ZTSFvP8JSTracerP8JSObjectE { char *ptr; };
struct IA2_fnptr__ZTSFvP8JSTracerPN2JS11CompartmentEPvE { char *ptr; };
struct IA2_fnptr__ZTSFvP8JSTracerPvE { char *ptr; };
struct IA2_fnptr__ZTSFvP8nsITimerPvE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContext10JSGCStatusN2JS8GCReasonEPvE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContextE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContextN2JS10GCProgressERKNS1_13GCDescriptionEE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContextN2JS17GCNurseryProgressENS1_8GCReasonEPvE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContextN2JS6HandleIP8JSObjectEERN7mozilla3dom18ProtoAndIfaceCacheENS7_23DefineInterfacePropertyEE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContextN2JS6HandleIP8JSObjectEES5_S5_S5_NS1_13MutableHandleIS4_EEE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContextP13JSErrorReportE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContextPN2JS5RealmEPcmRKNS1_15AutoRequireNoGCEE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContextPvE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContextPvPN2JS5RealmERKNS2_15AutoRequireNoGCEE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContextjPvPKcE { char *ptr; };
struct IA2_fnptr__ZTSFvP9JSContextmE { char *ptr; };
struct IA2_fnptr__ZTSFvPKcE { char *ptr; };
struct IA2_fnptr__ZTSFvPKcPvE { char *ptr; };
struct IA2_fnptr__ZTSFvPKhPhiE { char *ptr; };
struct IA2_fnptr__ZTSFvPKhjPKN7mozilla3gfx13FontVariationEjPvE { char *ptr; };
struct IA2_fnptr__ZTSFvPKhjPvE { char *ptr; };
struct IA2_fnptr__ZTSFvPKhjjPvE { char *ptr; };
struct IA2_fnptr__ZTSFvPKsPKiiiPtPmE { char *ptr; };
struct IA2_fnptr__ZTSFvPKvP19jemalloc_ptr_info_sE { char *ptr; };
struct IA2_fnptr__ZTSFvPN2JS9GCContextE16JSFinalizeStatusPvE { char *ptr; };
struct IA2_fnptr__ZTSFvPN2JS9GCContextEP8JSObjectE { char *ptr; };
struct IA2_fnptr__ZTSFvPN2JS9GCContextEPNS_11CompartmentEE { char *ptr; };
struct IA2_fnptr__ZTSFvPN2JS9GCContextEPNS_4ZoneEE { char *ptr; };
struct IA2_fnptr__ZTSFvPN2JS9GCContextEPNS_5RealmEE { char *ptr; };
struct IA2_fnptr__ZTSFvPN2JS9GCContextEPvE { char *ptr; };
struct IA2_fnptr__ZTSFvPPhjPfE { char *ptr; };
struct IA2_fnptr__ZTSFvPPhjPsE { char *ptr; };
struct IA2_fnptr__ZTSFvPPsjPfE { char *ptr; };
struct IA2_fnptr__ZTSFvPPsjPlE { char *ptr; };
struct IA2_fnptr__ZTSFvPfE { char *ptr; };
struct IA2_fnptr__ZTSFvPjPKjijE { char *ptr; };
struct IA2_fnptr__ZTSFvPjijE { char *ptr; };
struct IA2_fnptr__ZTSFvPlE { char *ptr; };
struct IA2_fnptr__ZTSFvPsE { char *ptr; };
struct IA2_fnptr__ZTSFvPsPfS0_E { char *ptr; };
struct IA2_fnptr__ZTSFvPsPlS0_E { char *ptr; };
struct IA2_fnptr__ZTSFvPsS_S_E { char *ptr; };
struct IA2_fnptr__ZTSFvPv15nsCSSPropertyIDE { char *ptr; };
struct IA2_fnptr__ZTSFvPv8nsresultE { char *ptr; };
struct IA2_fnptr__ZTSFvPv9VisitSideiiiiE { char *ptr; };
struct IA2_fnptr__ZTSFvPvE { char *ptr; };
struct IA2_fnptr__ZTSFvPvN2JS9GCCellPtrERKNS0_15AutoRequireNoGCEE { char *ptr; };
struct IA2_fnptr__ZTSFvPvP28nsCycleCollectionParticipantP27nsCycleCollectingAutoRefCntPbE { char *ptr; };
struct IA2_fnptr__ZTSFvPvP6nsAtomS_S_E { char *ptr; };
struct IA2_fnptr__ZTSFvPvPKPKhPKiiE { char *ptr; };
struct IA2_fnptr__ZTSFvPvS_E { char *ptr; };
struct IA2_fnptr__ZTSFvPvjE { char *ptr; };
struct IA2_fnptr__ZTSFvPvjiE { char *ptr; };
struct IA2_fnptr__ZTSFvPvmE { char *ptr; };
struct IA2_fnptr__ZTSFvRKN2JS5ValueEE { char *ptr; };
struct IA2_fnptr__ZTSFvRN7mozilla24ProfileBufferEntryReaderERNS_12baseprofiler20SpliceableJSONWriterEE { char *ptr; };
struct IA2_fnptr__ZTSFvRN7mozilla25MappedDeclarationsBuilderEE { char *ptr; };
struct IA2_fnptr__ZTSFvbE { char *ptr; };
struct IA2_fnptr__ZTSFviE { char *ptr; };
struct IA2_fnptr__ZTSFvjN2JS21TransferableOwnershipEPvmS1_E { char *ptr; };
struct IA2_fnptr__ZTSFvjPPPhjS0_E { char *ptr; };
struct IA2_fnptr__ZTSFvjPPPhjS0_iE { char *ptr; };
struct IA2_fnptr__ZTSFvjPPhPS0_jiE { char *ptr; };
struct IA2_fnptr__ZTSFvjPvS_S_E { char *ptr; };
struct IA2_fnptr__ZTSFvmE { char *ptr; };
struct IA2_fnptr__ZTSFvmPvE { char *ptr; };
struct IA2_fnptr__ZTSFvvE { char *ptr; };
extern struct IA2_fnptr__ZTSFjjjE __ia2_AddU32ToHash;
extern struct IA2_fnptr__ZTSF16already_AddRefedIN7mozilla12StringBufferEEmNS0_5MaybeImEEE __ia2_Alloc;
asm(
  ".set __ia2_Alloc, __real_Alloc\n"
);
extern struct IA2_fnptr__ZTSFvP8JSObjectN7mozilla3dom18ProtoAndIfaceCache4KindEE __ia2_AllocateProtoAndIfaceCache;
extern struct IA2_fnptr__ZTSFT0_mE __ia2_BitAt;
asm(
  ".set __ia2_BitAt, __real_BitAt\n"
);
extern struct IA2_fnptr__ZTSFT0_T_E __ia2_BitFor;
asm(
  ".set __ia2_BitFor, __real_BitFor\n"
);
extern struct IA2_fnptr__ZTSFP8JSObjectS0_P9JSContextbE __ia2_CheckedUnwrapDynamic;
asm(
  ".set __ia2_CheckedUnwrapDynamic, __real_CheckedUnwrapDynamic\n"
);
extern struct IA2_fnptr__ZTSFP8JSObjectS0_E __ia2_CheckedUnwrapStatic;
asm(
  ".set __ia2_CheckedUnwrapStatic, __real_CheckedUnwrapStatic\n"
);
extern struct IA2_fnptr__ZTSFvP9JSContextRKN7mozilla4SpanIKNS1_3dom15TypedArray_baseIT_E12element_typeELm18446744073709551615EEERS5_E __ia2_CopyFrom;
asm(
  ".set __ia2_CopyFrom, __real_CopyFrom\n"
);
extern struct IA2_fnptr__ZTSFbP9JSContextPDsP8JSStringmmE __ia2_CopyStringChars;
extern struct IA2_fnptr__ZTSFvP9JSContextN2JS6HandleIP8JSObjectEERN7mozilla3dom18ProtoAndIfaceCacheENS7_23DefineInterfacePropertyEE __ia2_CreateInterfaceObjects;
asm(
  ".set __ia2_CreateInterfaceObjects, __real_CreateInterfaceObjects\n"
);
extern struct IA2_fnptr__ZTSFvPvP6nsAtomS_S_E __ia2_DeleteProperty;
asm(
  ".set __ia2_DeleteProperty, __real_DeleteProperty\n"
);
extern struct IA2_fnptr__ZTSFvRN7mozilla24ProfileBufferEntryReaderERNS_12baseprofiler20SpliceableJSONWriterEE __ia2_Deserialize;
asm(
  ".set __ia2_Deserialize, __real_Deserialize\n"
);
extern struct IA2_fnptr__ZTSFT_S_S_S_E __ia2_DistanceFromInterval;
asm(
  ".set __ia2_DistanceFromInterval, __real_DistanceFromInterval\n"
);
extern struct IA2_fnptr__ZTSFbP9JSContextP8JSObjectE __ia2_EnsureNonInlineArrayBufferOrView;
asm(
  ".set __ia2_EnsureNonInlineArrayBufferOrView, __real_EnsureNonInlineArrayBufferOrView\n"
);
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structE __ia2_ErrorHandler;
extern struct IA2_fnptr__ZTSFvPN2JS14RootingContextEP8JSObjectmmPFvPvmEE __ia2_ForEachXrayReflectedHTMLAttributeSlots;
asm(
  ".set __ia2_ForEachXrayReflectedHTMLAttributeSlots, __real_ForEachXrayReflectedHTMLAttributeSlots\n"
);
extern struct IA2_fnptr__ZTSFN7mozilla16BaseTimeDurationIT_EEvE __ia2_Forever;
asm(
  ".set __ia2_Forever, __real_Forever\n"
);
extern struct IA2_fnptr__ZTSFPN7mozilla12StringBufferEPvE __ia2_FromData;
asm(
  ".set __ia2_FromData, __real_FromData\n"
);
extern struct IA2_fnptr__ZTSFN7mozilla16BaseTimeDurationIT_EEdE __ia2_FromMilliseconds;
asm(
  ".set __ia2_FromMilliseconds, __real_FromMilliseconds\n"
);
extern struct IA2_fnptr__ZTSFT0_RK6nsRectE __ia2_FromRect;
asm(
  ".set __ia2_FromRect, __real_FromRect\n"
);
extern struct IA2_fnptr__ZTSFbT_E __ia2_FuzzyIsInteger;
asm(
  ".set __ia2_FuzzyIsInteger, __real_FuzzyIsInteger\n"
);
extern struct IA2_fnptr__ZTSFijbRKN7mozilla3gfx12IntSizeTypedINS0_12UnknownUnitsEEEiE __ia2_HaeberliOutputUntilRow;
asm(
  ".set __ia2_HaeberliOutputUntilRow, __real_HaeberliOutputUntilRow\n"
);
extern struct IA2_fnptr__ZTSFjN7mozilla11ColorSchemeEE __ia2_HashColorScheme;
asm(
  ".set __ia2_HashColorScheme, __real_HashColorScheme\n"
);
extern struct IA2_fnptr__ZTSFjRKN7mozilla5image14ImageIntRegionEE __ia2_HashIIR;
asm(
  ".set __ia2_HashIIR, __real_HashIIR\n"
);
extern struct IA2_fnptr__ZTSFjRKN7mozilla22SVGPreserveAspectRatioEE __ia2_HashPAR;
asm(
  ".set __ia2_HashPAR, __real_HashPAR\n"
);
extern struct IA2_fnptr__ZTSFjRKN7mozilla3gfx12IntSizeTypedINS_8CSSPixelEEEE __ia2_HashSize;
asm(
  ".set __ia2_HashSize, __real_HashSize\n"
);
extern struct IA2_fnptr__ZTSFbP9JSContextjPN2JS5ValueEE __ia2_InterfaceObjectJSNative;
asm(
  ".set __ia2_InterfaceObjectJSNative, __real_InterfaceObjectJSNative\n"
);
extern struct IA2_fnptr__ZTSFvPhihE __ia2_InterpolateHorizontally;
asm(
  ".set __ia2_InterpolateHorizontally, __real_InterpolateHorizontally\n"
);
extern struct IA2_fnptr__ZTSFvPhS_hRN7mozilla5image13SurfaceFilterEE __ia2_InterpolateVertically;
asm(
  ".set __ia2_InterpolateVertically, __real_InterpolateVertically\n"
);
extern struct IA2_fnptr__ZTSFvmmE __ia2_InvalidArrayIndex_CRASH;
asm(
  ".set __ia2_InvalidArrayIndex_CRASH, __real_InvalidArrayIndex_CRASH\n"
);
extern struct IA2_fnptr__ZTSFbPKvE __ia2_IsCellPointerValidOrNull;
extern struct IA2_fnptr__ZTSFbPK8JSObjectE __ia2_IsWrapper;
extern struct IA2_fnptr__ZTSFN2JS6Scalar4TypeEP8JSObjectE __ia2_JS_GetArrayBufferViewType;
asm(
  ".set __ia2_JS_GetArrayBufferViewType, __real_JS_GetArrayBufferViewType\n"
);
extern struct IA2_fnptr__ZTSFN7mozilla19StyleTimingFunctionIT_T0_T1_EERKNS_18StyleTimingKeywordEE __ia2_Keyword;
asm(
  ".set __ia2_Keyword, __real_Keyword\n"
);
extern struct IA2_fnptr__ZTSFiihE __ia2_LastImportantRow;
asm(
  ".set __ia2_LastImportantRow, __real_LastImportantRow\n"
);
extern struct IA2_fnptr__ZTSFbP9JSContextjPN2JS5ValueEE __ia2_LegacyFactoryFunctionJSNative;
asm(
  ".set __ia2_LegacyFactoryFunctionJSNative, __real_LegacyFactoryFunctionJSNative\n"
);
extern struct IA2_fnptr__ZTSFN7mozilla12MarkerSchemaEvE __ia2_MarkerTypeDisplay;
asm(
  ".set __ia2_MarkerTypeDisplay, __real_MarkerTypeDisplay\n"
);
extern struct IA2_fnptr__ZTSFN7mozilla4SpanIKcLm18446744073709551615EEEvE __ia2_MarkerTypeName;
asm(
  ".set __ia2_MarkerTypeName, __real_MarkerTypeName\n"
);
extern struct IA2_fnptr__ZTSFT_vE __ia2_MaxOffset;
asm(
  ".set __ia2_MaxOffset, __real_MaxOffset\n"
);
extern struct IA2_fnptr__ZTSFvP9JSContextN2JS6HandleINS1_5ValueEEEE __ia2_MaybeReject;
asm(
  ".set __ia2_MaybeReject, __real_MaybeReject\n"
);
extern struct IA2_fnptr__ZTSF8nsresultP14nsIInputStreamPvPKcjjPjE __ia2_NS_CopySegmentToBuffer;
asm(
  ".set __ia2_NS_CopySegmentToBuffer, __real_NS_CopySegmentToBuffer\n"
);
extern struct IA2_fnptr__ZTSFbDsE __ia2_NS_IsAsciiWhitespace;
extern struct IA2_fnptr__ZTSFbDsE __ia2_NS_TokenizerIgnoreNothing;
extern struct IA2_fnptr__ZTSFP15nsIGlobalObjectP8JSObjectE __ia2_NativeGlobal;
asm(
  ".set __ia2_NativeGlobal, __real_NativeGlobal\n"
);
extern struct IA2_fnptr__ZTSFPN7mozilla5Queue4PageEvE __ia2_NewPage;
asm(
  ".set __ia2_NewPage, __real_NewPage\n"
);
extern struct IA2_fnptr__ZTSFvN2JS9GCCellPtrEPKcPvE __ia2_NoteJSChild;
asm(
  ".set __ia2_NoteJSChild, __real_NoteJSChild\n"
);
extern struct IA2_fnptr__ZTSFmP8JSObjectS0_E __ia2_ObjectMoved;
asm(
  ".set __ia2_ObjectMoved, __real_ObjectMoved\n"
);
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structE __ia2_OutputHandler;
extern struct IA2_fnptr__ZTSFbP8JSObjectbE __ia2_PinArrayBufferOrViewLength;
asm(
  ".set __ia2_PinArrayBufferOrViewLength, __real_PinArrayBufferOrViewLength\n"
);
extern struct IA2_fnptr__ZTSF8nsresultPKcP14nsIEventTargetP11nsISupportsbE __ia2_ProxyReleaseISupports;
asm(
  ".set __ia2_ProxyReleaseISupports, __real_ProxyReleaseISupports\n"
);
extern struct IA2_fnptr__ZTSF14nsTAutoStringNIT_XT0_EERN7mozilla24ProfileBufferEntryReaderEE __ia2_Read;
asm(
  ".set __ia2_Read, __real_Read\n"
);
extern struct IA2_fnptr__ZTSFNSt7__cxx1112basic_stringIT_St11char_traitsIS1_ESaIS1_EEERN7mozilla24ProfileBufferEntryReaderEmE __ia2_ReadChars;
asm(
  ".set __ia2_ReadChars, __real_ReadChars\n"
);
extern struct IA2_fnptr__ZTSFvRN7mozilla24ProfileBufferEntryReaderERNSt7__cxx1112basic_stringIT_St11char_traitsIS4_ESaIS4_EEEmE __ia2_ReadCharsInto;
asm(
  ".set __ia2_ReadCharsInto, __real_ReadCharsInto\n"
);
extern struct IA2_fnptr__ZTSFvRN7mozilla24ProfileBufferEntryReaderERNS_7VariantIJDpT_EEEE __ia2_ReadInto;
asm(
  ".set __ia2_ReadInto, __real_ReadInto\n"
);
extern struct IA2_fnptr__ZTSFvPT_S0_E __ia2_RelocateElement;
asm(
  ".set __ia2_RelocateElement, __real_RelocateElement\n"
);
extern struct IA2_fnptr__ZTSFvPT_S0_S0_E __ia2_RelocateRegionBackward;
asm(
  ".set __ia2_RelocateRegionBackward, __real_RelocateRegionBackward\n"
);
extern struct IA2_fnptr__ZTSFvPT_S0_S0_E __ia2_RelocateRegionForward;
asm(
  ".set __ia2_RelocateRegionForward, __real_RelocateRegionForward\n"
);
extern struct IA2_fnptr__ZTSFb22nsTArrayFallibleResultE __ia2_Result;
asm(
  ".set __ia2_Result, __real_Result\n"
);
extern struct IA2_fnptr__ZTSFN7mozilla3gfx10BaseMatrixIT_EES2_E __ia2_Rotation;
asm(
  ".set __ia2_Rotation, __real_Rotation\n"
);
extern struct IA2_fnptr__ZTSFiiiE __ia2_RoundDownToMultiple;
extern struct IA2_fnptr__ZTSFiiiE __ia2_RoundUpToMultiple;
extern struct IA2_fnptr__ZTSFvP8JSObjectmRKN2JS5ValueEE __ia2_SetProxyReservedSlot;
extern struct IA2_fnptr__ZTSFvPN2JS5RealmENS_18RTPCallerTypeTokenEE __ia2_SetRealmReduceTimerPrecisionCallerType;
asm(
  ".set __ia2_SetRealmReduceTimerPrecisionCallerType, __real_SetRealmReduceTimerPrecisionCallerType\n"
);
extern struct IA2_fnptr__ZTSFvP8JSObjectmRKN2JS5ValueEE __ia2_SetReservedSlot;
extern struct IA2_fnptr__ZTSFvRN7mozilla12baseprofiler20SpliceableJSONWriterERKNS_18ProfilerStringViewIcEEE __ia2_StreamJSONMarkerData;
asm(
  ".set __ia2_StreamJSONMarkerData, __real_StreamJSONMarkerData\n"
);
extern struct IA2_fnptr__ZTSFvP8nsITimerPvE __ia2_TimedOut;
asm(
  ".set __ia2_TimedOut, __real_TimedOut\n"
);
extern struct IA2_fnptr__ZTSFvP8nsITimerPvE __ia2_TimerCallback;
asm(
  ".set __ia2_TimerCallback, __real_TimerCallback\n"
);
extern struct IA2_fnptr__ZTSF6nsRectRKT0_E __ia2_ToRect;
extern struct IA2_fnptr__ZTSFvP8JSTracermPN2JS5ValueEE __ia2_TraceValueArray;
asm(
  ".set __ia2_TraceValueArray, __real_TraceValueArray\n"
);
extern struct IA2_fnptr__ZTSFP8JSObjectS0_E __ia2_UnwrapArrayBufferView;
asm(
  ".set __ia2_UnwrapArrayBufferView, __real_UnwrapArrayBufferView\n"
);
extern struct IA2_fnptr__ZTSFvPN2JS9GCContextEP8JSObjectE __ia2_XrayExpandoObjectFinalize;
asm(
  ".set __ia2_XrayExpandoObjectFinalize, __real_XrayExpandoObjectFinalize\n"
);
extern struct IA2_fnptr__ZTSFvP8JSTracerP8JSObjectE __ia2_XrayExpandoObjectTrace;
asm(
  ".set __ia2_XrayExpandoObjectTrace, __real_XrayExpandoObjectTrace\n"
);
extern struct IA2_fnptr__ZTSDoFbzE __ia2___builtin_add_overflow;
asm(
  ".set __ia2___builtin_add_overflow, __real___builtin_add_overflow\n"
);
extern struct IA2_fnptr__ZTSDoFttE __ia2___builtin_bswap16;
asm(
  ".set __ia2___builtin_bswap16, __real___builtin_bswap16\n"
);
extern struct IA2_fnptr__ZTSDoFjjE __ia2___builtin_bswap32;
asm(
  ".set __ia2___builtin_bswap32, __real___builtin_bswap32\n"
);
extern struct IA2_fnptr__ZTSDoFmmE __ia2___builtin_bswap64;
asm(
  ".set __ia2___builtin_bswap64, __real___builtin_bswap64\n"
);
extern struct IA2_fnptr__ZTSDoFlllE __ia2___builtin_expect;
asm(
  ".set __ia2___builtin_expect, __real___builtin_expect\n"
);
extern struct IA2_fnptr__ZTSDoFbzE __ia2___builtin_mul_overflow;
asm(
  ".set __ia2___builtin_mul_overflow, __real___builtin_mul_overflow\n"
);
extern struct IA2_fnptr__ZTSDoFbzE __ia2___builtin_sub_overflow;
asm(
  ".set __ia2___builtin_sub_overflow, __real___builtin_sub_overflow\n"
);
extern struct IA2_fnptr__ZTSFjjRKN7mozilla6detail9HashTable10DoubleHashEE __ia2_applyDoubleHash;
asm(
  ".set __ia2_applyDoubleHash, __real_applyDoubleHash\n"
);
extern struct IA2_fnptr__ZTSFvPKvS0_mE __ia2_assertNoOverlap;
asm(
  ".set __ia2_assertNoOverlap, __real_assertNoOverlap\n"
);
extern struct IA2_fnptr__ZTSFPcRT1_jN7mozilla6detail9HashTable15FailureBehaviorEE __ia2_createTable;
asm(
  ".set __ia2_createTable, __real_createTable\n"
);
extern struct IA2_fnptr__ZTSFvPT_S0_E __ia2_destroy;
asm(
  ".set __ia2_destroy, __real_destroy\n"
);
extern struct IA2_fnptr__ZTSFvRT1_PcjE __ia2_destroyTable;
asm(
  ".set __ia2_destroyTable, __real_destroyTable\n"
);
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structE __ia2_emptyOutputBuffer;
asm(
  ".set __ia2_emptyOutputBuffer, __real_emptyOutputBuffer\n"
);
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structE __ia2_errorExit;
asm(
  ".set __ia2_errorExit, __real_errorExit\n"
);
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_fill_input_buffer;
extern struct IA2_fnptr__ZTSFvRT1_PcjE __ia2_freeTable;
asm(
  ".set __ia2_freeTable, __real_freeTable\n"
);
extern struct IA2_fnptr__ZTSFN2JS13MutableHandleIP8JSObjectEEPS2_E __ia2_fromMarkedLocation;
asm(
  ".set __ia2_fromMarkedLocation, __real_fromMarkedLocation\n"
);
extern struct IA2_fnptr__ZTSFN2JS10TypedArrayIXT_EEEP8JSObjectE __ia2_fromObject;
asm(
  ".set __ia2_fromObject, __real_fromObject\n"
);
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_initDestination;
asm(
  ".set __ia2_initDestination, __real_initDestination\n"
);
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_init_source;
extern struct IA2_fnptr__ZTSFvPlE __ia2_jpeg12_fdct_ifast;
asm(
  ".set __ia2_jpeg12_fdct_ifast, __real_jpeg12_fdct_ifast\n"
);
extern struct IA2_fnptr__ZTSFvPlE __ia2_jpeg12_fdct_islow;
asm(
  ".set __ia2_jpeg12_fdct_islow, __real_jpeg12_fdct_islow\n"
);
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_10x10;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_11x11;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_12x12;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_13x13;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_14x14;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_15x15;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_16x16;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_1x1;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_2x2;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_3x3;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_4x4;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_5x5;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_6x6;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_7x7;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_9x9;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_float;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_ifast;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPS3_jE __ia2_jpeg12_idct_islow;
extern struct IA2_fnptr__ZTSFvPfE __ia2_jpeg_fdct_float;
extern struct IA2_fnptr__ZTSFvPsE __ia2_jpeg_fdct_ifast;
asm(
  ".set __ia2_jpeg_fdct_ifast, __real_jpeg_fdct_ifast\n"
);
extern struct IA2_fnptr__ZTSFvPsE __ia2_jpeg_fdct_islow;
asm(
  ".set __ia2_jpeg_fdct_islow, __real_jpeg_fdct_islow\n"
);
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_10x10;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_11x11;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_12x12;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_13x13;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_14x14;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_15x15;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_16x16;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_1x1;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_2x2;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_3x3;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_4x4;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_5x5;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_6x6;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_7x7;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_9x9;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_float;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_ifast;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jpeg_idct_islow;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structiE __ia2_jpeg_resync_to_restart;
extern struct IA2_fnptr__ZTSFvPPhjPsE __ia2_jsimd_convsamp;
extern struct IA2_fnptr__ZTSFvPPhjPfE __ia2_jsimd_convsamp_float;
extern struct IA2_fnptr__ZTSFvPKsPKiiiPtPmE __ia2_jsimd_encode_mcu_AC_first_prepare;
extern struct IA2_fnptr__ZTSFiPKsPKiiiPtPmE __ia2_jsimd_encode_mcu_AC_refine_prepare;
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extbgr_gray_convert_avx2;
asm(
  ".set __ia2_jsimd_extbgr_gray_convert_avx2, __real_jsimd_extbgr_gray_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extbgr_gray_convert_sse2;
asm(
  ".set __ia2_jsimd_extbgr_gray_convert_sse2, __real_jsimd_extbgr_gray_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extbgr_ycc_convert_avx2;
asm(
  ".set __ia2_jsimd_extbgr_ycc_convert_avx2, __real_jsimd_extbgr_ycc_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extbgr_ycc_convert_sse2;
asm(
  ".set __ia2_jsimd_extbgr_ycc_convert_sse2, __real_jsimd_extbgr_ycc_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extbgrx_gray_convert_avx2;
asm(
  ".set __ia2_jsimd_extbgrx_gray_convert_avx2, __real_jsimd_extbgrx_gray_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extbgrx_gray_convert_sse2;
asm(
  ".set __ia2_jsimd_extbgrx_gray_convert_sse2, __real_jsimd_extbgrx_gray_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extbgrx_ycc_convert_avx2;
asm(
  ".set __ia2_jsimd_extbgrx_ycc_convert_avx2, __real_jsimd_extbgrx_ycc_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extbgrx_ycc_convert_sse2;
asm(
  ".set __ia2_jsimd_extbgrx_ycc_convert_sse2, __real_jsimd_extbgrx_ycc_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extrgb_gray_convert_avx2;
asm(
  ".set __ia2_jsimd_extrgb_gray_convert_avx2, __real_jsimd_extrgb_gray_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extrgb_gray_convert_sse2;
asm(
  ".set __ia2_jsimd_extrgb_gray_convert_sse2, __real_jsimd_extrgb_gray_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extrgb_ycc_convert_avx2;
asm(
  ".set __ia2_jsimd_extrgb_ycc_convert_avx2, __real_jsimd_extrgb_ycc_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extrgb_ycc_convert_sse2;
asm(
  ".set __ia2_jsimd_extrgb_ycc_convert_sse2, __real_jsimd_extrgb_ycc_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extrgbx_gray_convert_avx2;
asm(
  ".set __ia2_jsimd_extrgbx_gray_convert_avx2, __real_jsimd_extrgbx_gray_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extrgbx_gray_convert_sse2;
asm(
  ".set __ia2_jsimd_extrgbx_gray_convert_sse2, __real_jsimd_extrgbx_gray_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extrgbx_ycc_convert_avx2;
asm(
  ".set __ia2_jsimd_extrgbx_ycc_convert_avx2, __real_jsimd_extrgbx_ycc_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extrgbx_ycc_convert_sse2;
asm(
  ".set __ia2_jsimd_extrgbx_ycc_convert_sse2, __real_jsimd_extrgbx_ycc_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extxbgr_gray_convert_avx2;
asm(
  ".set __ia2_jsimd_extxbgr_gray_convert_avx2, __real_jsimd_extxbgr_gray_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extxbgr_gray_convert_sse2;
asm(
  ".set __ia2_jsimd_extxbgr_gray_convert_sse2, __real_jsimd_extxbgr_gray_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extxbgr_ycc_convert_avx2;
asm(
  ".set __ia2_jsimd_extxbgr_ycc_convert_avx2, __real_jsimd_extxbgr_ycc_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extxbgr_ycc_convert_sse2;
asm(
  ".set __ia2_jsimd_extxbgr_ycc_convert_sse2, __real_jsimd_extxbgr_ycc_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extxrgb_gray_convert_avx2;
asm(
  ".set __ia2_jsimd_extxrgb_gray_convert_avx2, __real_jsimd_extxrgb_gray_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extxrgb_gray_convert_sse2;
asm(
  ".set __ia2_jsimd_extxrgb_gray_convert_sse2, __real_jsimd_extxrgb_gray_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extxrgb_ycc_convert_avx2;
asm(
  ".set __ia2_jsimd_extxrgb_ycc_convert_avx2, __real_jsimd_extxrgb_ycc_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_extxrgb_ycc_convert_sse2;
asm(
  ".set __ia2_jsimd_extxrgb_ycc_convert_sse2, __real_jsimd_extxrgb_ycc_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvPfE __ia2_jsimd_fdct_float;
extern struct IA2_fnptr__ZTSFvPsE __ia2_jsimd_fdct_ifast;
extern struct IA2_fnptr__ZTSFvPsE __ia2_jsimd_fdct_islow;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhS4_E __ia2_jsimd_h2v1_downsample;
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extbgr_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v1_extbgr_merged_upsample_avx2, __real_jsimd_h2v1_extbgr_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extbgr_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v1_extbgr_merged_upsample_sse2, __real_jsimd_h2v1_extbgr_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extbgrx_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v1_extbgrx_merged_upsample_avx2, __real_jsimd_h2v1_extbgrx_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extbgrx_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v1_extbgrx_merged_upsample_sse2, __real_jsimd_h2v1_extbgrx_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extrgb_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v1_extrgb_merged_upsample_avx2, __real_jsimd_h2v1_extrgb_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extrgb_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v1_extrgb_merged_upsample_sse2, __real_jsimd_h2v1_extrgb_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extrgbx_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v1_extrgbx_merged_upsample_avx2, __real_jsimd_h2v1_extrgbx_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extrgbx_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v1_extrgbx_merged_upsample_sse2, __real_jsimd_h2v1_extrgbx_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extxbgr_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v1_extxbgr_merged_upsample_avx2, __real_jsimd_h2v1_extxbgr_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extxbgr_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v1_extxbgr_merged_upsample_sse2, __real_jsimd_h2v1_extxbgr_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extxrgb_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v1_extxrgb_merged_upsample_avx2, __real_jsimd_h2v1_extxrgb_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_extxrgb_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v1_extxrgb_merged_upsample_sse2, __real_jsimd_h2v1_extxrgb_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_jsimd_h2v1_fancy_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_E __ia2_jsimd_h2v1_merged_upsample;
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v1_merged_upsample_avx2, __real_jsimd_h2v1_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v1_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v1_merged_upsample_sse2, __real_jsimd_h2v1_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_jsimd_h2v1_upsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhS4_E __ia2_jsimd_h2v2_downsample;
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extbgr_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v2_extbgr_merged_upsample_avx2, __real_jsimd_h2v2_extbgr_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extbgr_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v2_extbgr_merged_upsample_sse2, __real_jsimd_h2v2_extbgr_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extbgrx_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v2_extbgrx_merged_upsample_avx2, __real_jsimd_h2v2_extbgrx_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extbgrx_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v2_extbgrx_merged_upsample_sse2, __real_jsimd_h2v2_extbgrx_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extrgb_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v2_extrgb_merged_upsample_avx2, __real_jsimd_h2v2_extrgb_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extrgb_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v2_extrgb_merged_upsample_sse2, __real_jsimd_h2v2_extrgb_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extrgbx_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v2_extrgbx_merged_upsample_avx2, __real_jsimd_h2v2_extrgbx_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extrgbx_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v2_extrgbx_merged_upsample_sse2, __real_jsimd_h2v2_extrgbx_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extxbgr_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v2_extxbgr_merged_upsample_avx2, __real_jsimd_h2v2_extxbgr_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extxbgr_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v2_extxbgr_merged_upsample_sse2, __real_jsimd_h2v2_extxbgr_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extxrgb_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v2_extxrgb_merged_upsample_avx2, __real_jsimd_h2v2_extxrgb_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_extxrgb_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v2_extxrgb_merged_upsample_sse2, __real_jsimd_h2v2_extxrgb_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_jsimd_h2v2_fancy_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_E __ia2_jsimd_h2v2_merged_upsample;
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_merged_upsample_avx2;
asm(
  ".set __ia2_jsimd_h2v2_merged_upsample_avx2, __real_jsimd_h2v2_merged_upsample_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_E __ia2_jsimd_h2v2_merged_upsample_sse2;
asm(
  ".set __ia2_jsimd_h2v2_merged_upsample_sse2, __real_jsimd_h2v2_merged_upsample_sse2\n"
);
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_jsimd_h2v2_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jsimd_idct_2x2;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jsimd_idct_4x4;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jsimd_idct_float;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jsimd_idct_ifast;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPsPPhjE __ia2_jsimd_idct_islow;
extern struct IA2_fnptr__ZTSFvPsS_S_E __ia2_jsimd_quantize;
extern struct IA2_fnptr__ZTSFvPsPfS0_E __ia2_jsimd_quantize_float;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPS2_jiE __ia2_jsimd_rgb_gray_convert;
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_rgb_gray_convert_avx2;
asm(
  ".set __ia2_jsimd_rgb_gray_convert_avx2, __real_jsimd_rgb_gray_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_rgb_gray_convert_sse2;
asm(
  ".set __ia2_jsimd_rgb_gray_convert_sse2, __real_jsimd_rgb_gray_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPS2_jiE __ia2_jsimd_rgb_ycc_convert;
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_rgb_ycc_convert_avx2;
asm(
  ".set __ia2_jsimd_rgb_ycc_convert_avx2, __real_jsimd_rgb_ycc_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPhPS0_jiE __ia2_jsimd_rgb_ycc_convert_sse2;
asm(
  ".set __ia2_jsimd_rgb_ycc_convert_sse2, __real_jsimd_rgb_ycc_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extbgr_convert_avx2;
asm(
  ".set __ia2_jsimd_ycc_extbgr_convert_avx2, __real_jsimd_ycc_extbgr_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extbgr_convert_sse2;
asm(
  ".set __ia2_jsimd_ycc_extbgr_convert_sse2, __real_jsimd_ycc_extbgr_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extbgrx_convert_avx2;
asm(
  ".set __ia2_jsimd_ycc_extbgrx_convert_avx2, __real_jsimd_ycc_extbgrx_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extbgrx_convert_sse2;
asm(
  ".set __ia2_jsimd_ycc_extbgrx_convert_sse2, __real_jsimd_ycc_extbgrx_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extrgb_convert_avx2;
asm(
  ".set __ia2_jsimd_ycc_extrgb_convert_avx2, __real_jsimd_ycc_extrgb_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extrgb_convert_sse2;
asm(
  ".set __ia2_jsimd_ycc_extrgb_convert_sse2, __real_jsimd_ycc_extrgb_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extrgbx_convert_avx2;
asm(
  ".set __ia2_jsimd_ycc_extrgbx_convert_avx2, __real_jsimd_ycc_extrgbx_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extrgbx_convert_sse2;
asm(
  ".set __ia2_jsimd_ycc_extrgbx_convert_sse2, __real_jsimd_ycc_extrgbx_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extxbgr_convert_avx2;
asm(
  ".set __ia2_jsimd_ycc_extxbgr_convert_avx2, __real_jsimd_ycc_extxbgr_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extxbgr_convert_sse2;
asm(
  ".set __ia2_jsimd_ycc_extxbgr_convert_sse2, __real_jsimd_ycc_extxbgr_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extxrgb_convert_avx2;
asm(
  ".set __ia2_jsimd_ycc_extxrgb_convert_avx2, __real_jsimd_ycc_extxrgb_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_extxrgb_convert_sse2;
asm(
  ".set __ia2_jsimd_ycc_extxrgb_convert_sse2, __real_jsimd_ycc_extxrgb_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_jsimd_ycc_rgb565_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_jsimd_ycc_rgb_convert;
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_rgb_convert_avx2;
asm(
  ".set __ia2_jsimd_ycc_rgb_convert_avx2, __real_jsimd_ycc_rgb_convert_avx2\n"
);
extern struct IA2_fnptr__ZTSFvjPPPhjS0_iE __ia2_jsimd_ycc_rgb_convert_sse2;
asm(
  ".set __ia2_jsimd_ycc_rgb_convert_sse2, __real_jsimd_ycc_rgb_convert_sse2\n"
);
extern struct IA2_fnptr__ZTSFmmE __ia2_malloc_good_size;
asm(
  ".set __ia2_malloc_good_size, __real_malloc_good_size\n"
);
extern struct IA2_fnptr__ZTSFbRT_RKNT0_6LookupEE __ia2_match;
asm(
  ".set __ia2_match, __real_match\n"
);
extern struct IA2_fnptr__ZTSDoFPvS_PKvmE __ia2_memcpy;
asm(
  ".set __ia2_memcpy, __real_memcpy\n"
);
extern struct IA2_fnptr__ZTSFiPKcS0_mmE __ia2_nsCaseInsensitiveCStringComparator;
asm(
  ".set __ia2_nsCaseInsensitiveCStringComparator, __real_nsCaseInsensitiveCStringComparator\n"
);
extern struct IA2_fnptr__ZTSFiPKDsS0_mmE __ia2_nsCaseInsensitiveStringComparator;
asm(
  ".set __ia2_nsCaseInsensitiveStringComparator, __real_nsCaseInsensitiveStringComparator\n"
);
extern struct IA2_fnptr__ZTSFiPKcS0_mmE __ia2_nsTDefaultStringComparator;
asm(
  ".set __ia2_nsTDefaultStringComparator, __real_nsTDefaultStringComparator\n"
);
extern struct IA2_fnptr__ZTSFvPP8JSObjectS0_S0_E __ia2_postWriteBarrier;
asm(
  ".set __ia2_postWriteBarrier, __real_postWriteBarrier\n"
);
extern struct IA2_fnptr__ZTSFjjE __ia2_prepareHash;
asm(
  ".set __ia2_prepareHash, __real_prepareHash\n"
);
extern struct IA2_fnptr__ZTSFbRN7mozilla20ProfileChunkedBufferENS_19StackCaptureOptionsEE __ia2_profiler_capture_backtrace_into;
asm(
  ".set __ia2_profiler_capture_backtrace_into, __real_profiler_capture_backtrace_into\n"
);
extern struct IA2_fnptr__ZTSFvP12PLDHashTableP15PLDHashEntryHdrE __ia2_s_ClearEntry;
asm(
  ".set __ia2_s_ClearEntry, __real_s_ClearEntry\n"
);
extern struct IA2_fnptr__ZTSFvP12PLDHashTablePK15PLDHashEntryHdrPS1_E __ia2_s_CopyEntry;
asm(
  ".set __ia2_s_CopyEntry, __real_s_CopyEntry\n"
);
extern struct IA2_fnptr__ZTSFjPKvE __ia2_s_HashKey;
asm(
  ".set __ia2_s_HashKey, __real_s_HashKey\n"
);
extern struct IA2_fnptr__ZTSFbPK15PLDHashEntryHdrPKvE __ia2_s_MatchEntry;
asm(
  ".set __ia2_s_MatchEntry, __real_s_MatchEntry\n"
);
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structlE __ia2_skip_input_data;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_termDestination;
asm(
  ".set __ia2_termDestination, __real_termDestination\n"
);
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_term_source;
extern struct IA2_fnptr__ZTSFvPP8JSObjectS0_S0_E __ia2_writeBarriers;
asm(
  ".set __ia2_writeBarriers, __real_writeBarriers\n"
);
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_fill_input_buffer;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_init_source;
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structE __ia2_my_error_exit;
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structE __ia2_progress_monitor;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structlE __ia2_skip_input_data;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_term_source;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPhE __ia2_compress_data;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPsE __ia2_compress_data;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPhE __ia2_compress_first_pass;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPsE __ia2_compress_first_pass;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPhE __ia2_compress_output;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPsE __ia2_compress_output;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_struct10J_BUF_MODEE __ia2_start_pass_coef;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPS2_jiE __ia2_cmyk_ycck_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPS2_jiE __ia2_cmyk_ycck_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPS2_jiE __ia2_cmyk_ycck_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPS2_jiE __ia2_grayscale_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPS2_jiE __ia2_grayscale_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPS2_jiE __ia2_grayscale_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPS2_jiE __ia2_null_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPS2_jiE __ia2_null_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPS2_jiE __ia2_null_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_null_method;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPS2_jiE __ia2_rgb_gray_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPS2_jiE __ia2_rgb_gray_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPS2_jiE __ia2_rgb_gray_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPS2_jiE __ia2_rgb_rgb_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPS2_jiE __ia2_rgb_rgb_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPS2_jiE __ia2_rgb_rgb_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPS2_jiE __ia2_rgb_ycc_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPS2_jiE __ia2_rgb_ycc_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPS2_jiE __ia2_rgb_ycc_convert;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_rgb_ycc_start;
extern struct IA2_fnptr__ZTSFvPPhjPsE __ia2_convsamp;
extern struct IA2_fnptr__ZTSFvPPsjPlE __ia2_convsamp;
extern struct IA2_fnptr__ZTSFvPPhjPfE __ia2_convsamp_float;
extern struct IA2_fnptr__ZTSFvPPsjPfE __ia2_convsamp_float;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhPA64_sjjjE __ia2_forward_DCT;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPsPA64_sjjjE __ia2_forward_DCT;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhPA64_sjjjE __ia2_forward_DCT_float;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPsPA64_sjjjE __ia2_forward_DCT_float;
extern struct IA2_fnptr__ZTSFvPsPlS0_E __ia2_quantize;
extern struct IA2_fnptr__ZTSFvPsS_S_E __ia2_quantize;
extern struct IA2_fnptr__ZTSFvPsPfS0_E __ia2_quantize_float;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_start_pass_fdctmgr;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPhE __ia2_compress_data;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPsE __ia2_compress_data;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPtE __ia2_compress_data;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPhE __ia2_compress_first_pass;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPsE __ia2_compress_first_pass;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPtE __ia2_compress_first_pass;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPhE __ia2_compress_output;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPsE __ia2_compress_output;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPtE __ia2_compress_output;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_struct10J_BUF_MODEE __ia2_start_pass_diff;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPA64_sE __ia2_encode_mcu_gather;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPA64_sE __ia2_encode_mcu_huff;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_finish_pass_gather;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_finish_pass_huff;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiE __ia2_start_pass_huff;
extern struct IA2_fnptr__ZTSFjP20jpeg_compress_structPPPijjjE __ia2_encode_mcus_gather;
extern struct IA2_fnptr__ZTSFjP20jpeg_compress_structPPPijjjE __ia2_encode_mcus_huff;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_finish_pass_gather;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_finish_pass_huff;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiE __ia2_start_pass_lhuff;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPhS1_PijE __ia2_jpeg_difference1;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPsS1_PijE __ia2_jpeg_difference1;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPtS1_PijE __ia2_jpeg_difference1;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPhS1_PijE __ia2_jpeg_difference2;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPsS1_PijE __ia2_jpeg_difference2;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPtS1_PijE __ia2_jpeg_difference2;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPhS1_PijE __ia2_jpeg_difference3;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPsS1_PijE __ia2_jpeg_difference3;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPtS1_PijE __ia2_jpeg_difference3;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPhS1_PijE __ia2_jpeg_difference4;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPsS1_PijE __ia2_jpeg_difference4;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPtS1_PijE __ia2_jpeg_difference4;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPhS1_PijE __ia2_jpeg_difference5;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPsS1_PijE __ia2_jpeg_difference5;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPtS1_PijE __ia2_jpeg_difference5;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPhS1_PijE __ia2_jpeg_difference6;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPsS1_PijE __ia2_jpeg_difference6;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPtS1_PijE __ia2_jpeg_difference6;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPhS1_PijE __ia2_jpeg_difference7;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPsS1_PijE __ia2_jpeg_difference7;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPtS1_PijE __ia2_jpeg_difference7;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPhS1_PijE __ia2_jpeg_difference_first_row;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPsS1_PijE __ia2_jpeg_difference_first_row;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiPtS1_PijE __ia2_jpeg_difference_first_row;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPhS1_jE __ia2_noscale;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPsS1_jE __ia2_noscale;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPtS1_jE __ia2_noscale;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPhS1_jE __ia2_simple_downscale;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPsS1_jE __ia2_simple_downscale;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPtS1_jE __ia2_simple_downscale;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_start_pass_lossless;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPjjE __ia2_process_data_simple_main;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPjjE __ia2_process_data_simple_main;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPjjE __ia2_process_data_simple_main;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_struct10J_BUF_MODEE __ia2_start_pass_main;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_write_file_header;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_write_file_trailer;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_write_frame_header;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiE __ia2_write_marker_byte;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structijE __ia2_write_marker_header;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_write_scan_header;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_write_tables_only;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_finish_pass_master;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_pass_startup;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_prepare_for_pass;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPA64_sE __ia2_encode_mcu_AC_first;
extern struct IA2_fnptr__ZTSFvPKsPKiiiPtPmE __ia2_encode_mcu_AC_first_prepare;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPA64_sE __ia2_encode_mcu_AC_refine;
extern struct IA2_fnptr__ZTSFiPKsPKiiiPtPmE __ia2_encode_mcu_AC_refine_prepare;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPA64_sE __ia2_encode_mcu_DC_first;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPA64_sE __ia2_encode_mcu_DC_refine;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_finish_pass_gather_phuff;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_finish_pass_phuff;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structiE __ia2_start_pass_phuff;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPjjPS2_S3_jE __ia2_pre_process_context;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPjjPS2_S3_jE __ia2_pre_process_context;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPjjPS2_S3_jE __ia2_pre_process_context;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPhPjjPS2_S3_jE __ia2_pre_process_data;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPsPjjPS2_S3_jE __ia2_pre_process_data;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPtPjjPS2_S3_jE __ia2_pre_process_data;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_struct10J_BUF_MODEE __ia2_start_pass_prep;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhS4_E __ia2_fullsize_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPsS4_E __ia2_fullsize_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPtS4_E __ia2_fullsize_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhS4_E __ia2_fullsize_smooth_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPsS4_E __ia2_fullsize_smooth_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPtS4_E __ia2_fullsize_smooth_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhS4_E __ia2_h2v1_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPsS4_E __ia2_h2v1_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPtS4_E __ia2_h2v1_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhS4_E __ia2_h2v2_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPsS4_E __ia2_h2v2_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPtS4_E __ia2_h2v2_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhS4_E __ia2_h2v2_smooth_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPsS4_E __ia2_h2v2_smooth_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPtS4_E __ia2_h2v2_smooth_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPhS4_E __ia2_int_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPsS4_E __ia2_int_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structP19jpeg_component_infoPPtS4_E __ia2_int_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPPhjS3_jE __ia2_sep_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPPsjS3_jE __ia2_sep_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structPPPtjS3_jE __ia2_sep_downsample;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_start_pass_downsample;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPhE __ia2_compress_output;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structPPPsE __ia2_compress_output_12;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_struct10J_BUF_MODEE __ia2_start_pass_coef;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_noop_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_noop_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhS2_iE __ia2_noop_quantize;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsS2_iE __ia2_noop_quantize;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structE __ia2_empty_mem_output_buffer;
extern struct IA2_fnptr__ZTSFiP20jpeg_compress_structE __ia2_empty_output_buffer;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_init_destination;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_init_mem_destination;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_term_destination;
extern struct IA2_fnptr__ZTSFvP20jpeg_compress_structE __ia2_term_mem_destination;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_fill_input_buffer;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_fill_mem_input_buffer;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_init_mem_source;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_init_source;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structlE __ia2_skip_input_data;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_term_source;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_consume_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPhE __ia2_decompress_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPsE __ia2_decompress_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPhE __ia2_decompress_onepass;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPsE __ia2_decompress_onepass;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPhE __ia2_decompress_smooth_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPsE __ia2_decompress_smooth_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_dummy_consume_data;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_input_pass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_output_pass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_gray_rgb565D_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_gray_rgb565D_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_gray_rgb565D_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_gray_rgb565_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_gray_rgb565_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_gray_rgb565_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_gray_rgb_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_gray_rgb_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_gray_rgb_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_grayscale_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_grayscale_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_grayscale_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_null_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_null_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_null_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_rgb_gray_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_rgb_gray_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_rgb_gray_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_rgb_rgb565D_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_rgb_rgb565D_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_rgb_rgb565D_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_rgb_rgb565_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_rgb_rgb565_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_rgb_rgb565_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_rgb_rgb_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_rgb_rgb_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_rgb_rgb_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_pass_dcolor;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_ycc_rgb565D_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_ycc_rgb565D_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_ycc_rgb565D_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_ycc_rgb565_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_ycc_rgb565_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_ycc_rgb565_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_ycc_rgb_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_ycc_rgb_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_ycc_rgb_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_iE __ia2_ycck_cmyk_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_iE __ia2_ycck_cmyk_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtjS2_iE __ia2_ycck_cmyk_convert;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_pass;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_consume_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPhE __ia2_decompress_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPsE __ia2_decompress_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPtE __ia2_decompress_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_dummy_consume_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPhE __ia2_output_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPsE __ia2_output_data;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPPtE __ia2_output_data;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_input_pass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_output_pass;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPA64_sE __ia2_decode_mcu;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_pass_huff_decoder;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_consume_markers;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_finish_input_pass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_reset_input_controller;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_input_pass;
extern struct IA2_fnptr__ZTSFjP22jpeg_decompress_structPPPijjjE __ia2_decode_mcus;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_process_restart;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_pass_lhuff_decoder;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiPiS1_S1_jE __ia2_jpeg_undifference1;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiPiS1_S1_jE __ia2_jpeg_undifference2;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiPiS1_S1_jE __ia2_jpeg_undifference3;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiPiS1_S1_jE __ia2_jpeg_undifference4;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiPiS1_S1_jE __ia2_jpeg_undifference5;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiPiS1_S1_jE __ia2_jpeg_undifference6;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiPiS1_S1_jE __ia2_jpeg_undifference7;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiPiS1_S1_jE __ia2_jpeg_undifference_first_row;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPiPhjE __ia2_noscale;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPiPsjE __ia2_noscale;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPiPtjE __ia2_noscale;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPiPhjE __ia2_simple_upscale;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPiPsjE __ia2_simple_upscale;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPiPtjE __ia2_simple_upscale;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_pass_lossless;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhPjjE __ia2_process_data_context_main;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsPjjE __ia2_process_data_context_main;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPtPjjE __ia2_process_data_context_main;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhPjjE __ia2_process_data_crank_post;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsPjjE __ia2_process_data_crank_post;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPtPjjE __ia2_process_data_crank_post;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhPjjE __ia2_process_data_simple_main;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsPjjE __ia2_process_data_simple_main;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPtPjjE __ia2_process_data_simple_main;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_struct10J_BUF_MODEE __ia2_start_pass_main;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_get_interesting_appn;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_read_markers;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_read_restart_marker;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_reset_marker_reader;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_save_marker;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structE __ia2_skip_variable;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_finish_output_pass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_prepare_for_output_pass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_E __ia2_h2v1_merged_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_E __ia2_h2v1_merged_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_E __ia2_h2v1_merged_upsample_565;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_E __ia2_h2v1_merged_upsample_565;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_E __ia2_h2v1_merged_upsample_565D;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_E __ia2_h2v1_merged_upsample_565D;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_E __ia2_h2v2_merged_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_E __ia2_h2v2_merged_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_E __ia2_h2v2_merged_upsample_565;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_E __ia2_h2v2_merged_upsample_565;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhjS2_E __ia2_h2v2_merged_upsample_565D;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsjS2_E __ia2_h2v2_merged_upsample_565D;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhPjjS2_S4_jE __ia2_merged_1v_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsPjjS2_S4_jE __ia2_merged_1v_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhPjjS2_S4_jE __ia2_merged_2v_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsPjjS2_S4_jE __ia2_merged_2v_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_pass_merged_upsample;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPA64_sE __ia2_decode_mcu_AC_first;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPA64_sE __ia2_decode_mcu_AC_refine;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPA64_sE __ia2_decode_mcu_DC_first;
extern struct IA2_fnptr__ZTSFiP22jpeg_decompress_structPPA64_sE __ia2_decode_mcu_DC_refine;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_pass_phuff_decoder;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhPjjS2_S4_jE __ia2_post_process_1pass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsPjjS2_S4_jE __ia2_post_process_1pass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhPjjS2_S4_jE __ia2_post_process_2pass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsPjjS2_S4_jE __ia2_post_process_2pass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhPjjS2_S4_jE __ia2_post_process_prepass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsPjjS2_S4_jE __ia2_post_process_prepass;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_struct10J_BUF_MODEE __ia2_start_pass_dpost;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_fullsize_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPsPS4_E __ia2_fullsize_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPtPS4_E __ia2_fullsize_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_h1v2_fancy_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPsPS4_E __ia2_h1v2_fancy_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPtPS4_E __ia2_h1v2_fancy_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_h2v1_fancy_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPsPS4_E __ia2_h2v1_fancy_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPtPS4_E __ia2_h2v1_fancy_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_h2v1_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPsPS4_E __ia2_h2v1_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPtPS4_E __ia2_h2v1_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_h2v2_fancy_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPsPS4_E __ia2_h2v2_fancy_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPtPS4_E __ia2_h2v2_fancy_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_h2v2_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPsPS4_E __ia2_h2v2_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPtPS4_E __ia2_h2v2_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_int_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPsPS4_E __ia2_int_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPtPS4_E __ia2_int_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPhPS4_E __ia2_noop_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPsPS4_E __ia2_noop_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structP19jpeg_component_infoPPtPS4_E __ia2_noop_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPhPjjS2_S4_jE __ia2_sep_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPsPjjS2_S4_jE __ia2_sep_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPPtPjjS2_S4_jE __ia2_sep_upsample;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_start_pass_upsample;
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structiE __ia2_emit_message;
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structE __ia2_error_exit;
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structPcE __ia2_format_message;
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structE __ia2_output_message;
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structE __ia2_reset_error_mgr;
extern struct IA2_fnptr__ZTSFPPA64_sP18jpeg_common_structP20jvirt_barray_controljjiE __ia2_access_virt_barray;
extern struct IA2_fnptr__ZTSFPPhP18jpeg_common_structP20jvirt_sarray_controljjiE __ia2_access_virt_sarray;
extern struct IA2_fnptr__ZTSFPPA64_sP18jpeg_common_structijjE __ia2_alloc_barray;
extern struct IA2_fnptr__ZTSFPvP18jpeg_common_structimE __ia2_alloc_large;
extern struct IA2_fnptr__ZTSFPPhP18jpeg_common_structijjE __ia2_alloc_sarray;
extern struct IA2_fnptr__ZTSFPvP18jpeg_common_structimE __ia2_alloc_small;
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structiE __ia2_free_pool;
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structE __ia2_realize_virt_arrays;
extern struct IA2_fnptr__ZTSFP20jvirt_barray_controlP18jpeg_common_structiijjjE __ia2_request_virt_barray;
extern struct IA2_fnptr__ZTSFP20jvirt_sarray_controlP18jpeg_common_structiijjjE __ia2_request_virt_sarray;
extern struct IA2_fnptr__ZTSFvP18jpeg_common_structE __ia2_self_destruct;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhS2_iE __ia2_color_quantize;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsS2_iE __ia2_color_quantize;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhS2_iE __ia2_color_quantize3;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsS2_iE __ia2_color_quantize3;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_finish_pass_1_quant;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_new_color_map_1_quant;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhS2_iE __ia2_quantize3_ord_dither;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsS2_iE __ia2_quantize3_ord_dither;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhS2_iE __ia2_quantize_fs_dither;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsS2_iE __ia2_quantize_fs_dither;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhS2_iE __ia2_quantize_ord_dither;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsS2_iE __ia2_quantize_ord_dither;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiE __ia2_start_pass_1_quant;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_finish_pass1;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_finish_pass2;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structE __ia2_new_color_map_2_quant;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhS2_iE __ia2_pass2_fs_dither;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsS2_iE __ia2_pass2_fs_dither;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhS2_iE __ia2_pass2_no_dither;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsS2_iE __ia2_pass2_no_dither;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPhS2_iE __ia2_prescan_quantize;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structPPsS2_iE __ia2_prescan_quantize;
extern struct IA2_fnptr__ZTSFvP22jpeg_decompress_structiE __ia2_start_pass_2_quant;
extern struct IA2_fnptr__ZTSFifE __ia2_DefaultPercentLengthToAppUnits;
extern struct IA2_fnptr__ZTSFvP12PLDHashTablePK15PLDHashEntryHdrPS1_E __ia2_FixedSizeEntryMover;
extern struct IA2_fnptr__ZTSFvN2JS9GCCellPtrEPKcPvE __ia2_SearchGray;
asm("__libia2_abort:\n"
    "ud2");
#define IA2_DEFINE_WRAPPER_AddU32ToHash \
asm(\
    /* Wrapper for AddU32ToHash(): */ \
    ".text\n" \
    ".global __ia2_AddU32ToHash\n" \
    ".type __ia2_AddU32ToHash, @function\n" \
    "__ia2_AddU32ToHash:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call AddU32ToHash\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_AddU32ToHash, .-__ia2_AddU32ToHash\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_AllocateProtoAndIfaceCache \
asm(\
    /* Wrapper for AllocateProtoAndIfaceCache(): */ \
    ".text\n" \
    ".global __ia2_AllocateProtoAndIfaceCache\n" \
    ".type __ia2_AllocateProtoAndIfaceCache, @function\n" \
    "__ia2_AllocateProtoAndIfaceCache:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call AllocateProtoAndIfaceCache\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_AllocateProtoAndIfaceCache, .-__ia2_AllocateProtoAndIfaceCache\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_CopyStringChars \
asm(\
    /* Wrapper for CopyStringChars(): */ \
    ".text\n" \
    ".global __ia2_CopyStringChars\n" \
    ".type __ia2_CopyStringChars, @function\n" \
    "__ia2_CopyStringChars:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call CopyStringChars\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_CopyStringChars, .-__ia2_CopyStringChars\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ErrorHandler \
asm(\
    /* Wrapper for ErrorHandler(int): */ \
    ".text\n" \
    ".global __ia2_ErrorHandler\n" \
    ".type __ia2_ErrorHandler, @function\n" \
    "__ia2_ErrorHandler:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ErrorHandler\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ErrorHandler, .-__ia2_ErrorHandler\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_IsCellPointerValidOrNull \
asm(\
    /* Wrapper for IsCellPointerValidOrNull(): */ \
    ".text\n" \
    ".global __ia2_IsCellPointerValidOrNull\n" \
    ".type __ia2_IsCellPointerValidOrNull, @function\n" \
    "__ia2_IsCellPointerValidOrNull:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call IsCellPointerValidOrNull\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_IsCellPointerValidOrNull, .-__ia2_IsCellPointerValidOrNull\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_IsWrapper \
asm(\
    /* Wrapper for IsWrapper(): */ \
    ".text\n" \
    ".global __ia2_IsWrapper\n" \
    ".type __ia2_IsWrapper, @function\n" \
    "__ia2_IsWrapper:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call IsWrapper\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_IsWrapper, .-__ia2_IsWrapper\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_NS_IsAsciiWhitespace \
asm(\
    /* Wrapper for NS_IsAsciiWhitespace(int) -> int: */ \
    ".text\n" \
    ".global __ia2_NS_IsAsciiWhitespace\n" \
    ".type __ia2_NS_IsAsciiWhitespace, @function\n" \
    "__ia2_NS_IsAsciiWhitespace:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call NS_IsAsciiWhitespace\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_NS_IsAsciiWhitespace, .-__ia2_NS_IsAsciiWhitespace\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_NS_TokenizerIgnoreNothing \
asm(\
    /* Wrapper for NS_TokenizerIgnoreNothing(int) -> int: */ \
    ".text\n" \
    ".global __ia2_NS_TokenizerIgnoreNothing\n" \
    ".type __ia2_NS_TokenizerIgnoreNothing, @function\n" \
    "__ia2_NS_TokenizerIgnoreNothing:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call NS_TokenizerIgnoreNothing\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_NS_TokenizerIgnoreNothing, .-__ia2_NS_TokenizerIgnoreNothing\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_OutputHandler \
asm(\
    /* Wrapper for OutputHandler(int): */ \
    ".text\n" \
    ".global __ia2_OutputHandler\n" \
    ".type __ia2_OutputHandler, @function\n" \
    "__ia2_OutputHandler:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call OutputHandler\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_OutputHandler, .-__ia2_OutputHandler\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_RoundDownToMultiple \
asm(\
    /* Wrapper for RoundDownToMultiple(): */ \
    ".text\n" \
    ".global __ia2_RoundDownToMultiple\n" \
    ".type __ia2_RoundDownToMultiple, @function\n" \
    "__ia2_RoundDownToMultiple:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call RoundDownToMultiple\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_RoundDownToMultiple, .-__ia2_RoundDownToMultiple\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_RoundUpToMultiple \
asm(\
    /* Wrapper for RoundUpToMultiple(): */ \
    ".text\n" \
    ".global __ia2_RoundUpToMultiple\n" \
    ".type __ia2_RoundUpToMultiple, @function\n" \
    "__ia2_RoundUpToMultiple:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call RoundUpToMultiple\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_RoundUpToMultiple, .-__ia2_RoundUpToMultiple\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_SetProxyReservedSlot \
asm(\
    /* Wrapper for SetProxyReservedSlot(): */ \
    ".text\n" \
    ".global __ia2_SetProxyReservedSlot\n" \
    ".type __ia2_SetProxyReservedSlot, @function\n" \
    "__ia2_SetProxyReservedSlot:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call SetProxyReservedSlot\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_SetProxyReservedSlot, .-__ia2_SetProxyReservedSlot\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_SetReservedSlot \
asm(\
    /* Wrapper for SetReservedSlot(): */ \
    ".text\n" \
    ".global __ia2_SetReservedSlot\n" \
    ".type __ia2_SetReservedSlot, @function\n" \
    "__ia2_SetReservedSlot:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call SetReservedSlot\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_SetReservedSlot, .-__ia2_SetReservedSlot\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ToRect \
asm(\
    /* Wrapper for ToRect(): */ \
    ".text\n" \
    ".global __ia2_ToRect\n" \
    ".type __ia2_ToRect, @function\n" \
    "__ia2_ToRect:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ToRect\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ToRect, .-__ia2_ToRect\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fill_input_buffer \
asm(\
    /* Wrapper for fill_input_buffer(int) -> int: */ \
    ".text\n" \
    ".global __ia2_fill_input_buffer\n" \
    ".type __ia2_fill_input_buffer, @function\n" \
    "__ia2_fill_input_buffer:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fill_input_buffer\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fill_input_buffer, .-__ia2_fill_input_buffer\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_init_source \
asm(\
    /* Wrapper for init_source(int): */ \
    ".text\n" \
    ".global __ia2_init_source\n" \
    ".type __ia2_init_source, @function\n" \
    "__ia2_init_source:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call init_source\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_init_source, .-__ia2_init_source\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_10x10 \
asm(\
    /* Wrapper for jpeg12_idct_10x10(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_10x10\n" \
    ".type __ia2_jpeg12_idct_10x10, @function\n" \
    "__ia2_jpeg12_idct_10x10:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_10x10\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_10x10, .-__ia2_jpeg12_idct_10x10\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_11x11 \
asm(\
    /* Wrapper for jpeg12_idct_11x11(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_11x11\n" \
    ".type __ia2_jpeg12_idct_11x11, @function\n" \
    "__ia2_jpeg12_idct_11x11:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_11x11\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_11x11, .-__ia2_jpeg12_idct_11x11\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_12x12 \
asm(\
    /* Wrapper for jpeg12_idct_12x12(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_12x12\n" \
    ".type __ia2_jpeg12_idct_12x12, @function\n" \
    "__ia2_jpeg12_idct_12x12:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_12x12\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_12x12, .-__ia2_jpeg12_idct_12x12\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_13x13 \
asm(\
    /* Wrapper for jpeg12_idct_13x13(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_13x13\n" \
    ".type __ia2_jpeg12_idct_13x13, @function\n" \
    "__ia2_jpeg12_idct_13x13:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_13x13\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_13x13, .-__ia2_jpeg12_idct_13x13\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_14x14 \
asm(\
    /* Wrapper for jpeg12_idct_14x14(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_14x14\n" \
    ".type __ia2_jpeg12_idct_14x14, @function\n" \
    "__ia2_jpeg12_idct_14x14:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_14x14\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_14x14, .-__ia2_jpeg12_idct_14x14\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_15x15 \
asm(\
    /* Wrapper for jpeg12_idct_15x15(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_15x15\n" \
    ".type __ia2_jpeg12_idct_15x15, @function\n" \
    "__ia2_jpeg12_idct_15x15:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_15x15\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_15x15, .-__ia2_jpeg12_idct_15x15\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_16x16 \
asm(\
    /* Wrapper for jpeg12_idct_16x16(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_16x16\n" \
    ".type __ia2_jpeg12_idct_16x16, @function\n" \
    "__ia2_jpeg12_idct_16x16:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_16x16\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_16x16, .-__ia2_jpeg12_idct_16x16\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_1x1 \
asm(\
    /* Wrapper for jpeg12_idct_1x1(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_1x1\n" \
    ".type __ia2_jpeg12_idct_1x1, @function\n" \
    "__ia2_jpeg12_idct_1x1:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_1x1\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_1x1, .-__ia2_jpeg12_idct_1x1\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_2x2 \
asm(\
    /* Wrapper for jpeg12_idct_2x2(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_2x2\n" \
    ".type __ia2_jpeg12_idct_2x2, @function\n" \
    "__ia2_jpeg12_idct_2x2:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_2x2\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_2x2, .-__ia2_jpeg12_idct_2x2\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_3x3 \
asm(\
    /* Wrapper for jpeg12_idct_3x3(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_3x3\n" \
    ".type __ia2_jpeg12_idct_3x3, @function\n" \
    "__ia2_jpeg12_idct_3x3:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_3x3\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_3x3, .-__ia2_jpeg12_idct_3x3\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_4x4 \
asm(\
    /* Wrapper for jpeg12_idct_4x4(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_4x4\n" \
    ".type __ia2_jpeg12_idct_4x4, @function\n" \
    "__ia2_jpeg12_idct_4x4:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_4x4\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_4x4, .-__ia2_jpeg12_idct_4x4\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_5x5 \
asm(\
    /* Wrapper for jpeg12_idct_5x5(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_5x5\n" \
    ".type __ia2_jpeg12_idct_5x5, @function\n" \
    "__ia2_jpeg12_idct_5x5:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_5x5\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_5x5, .-__ia2_jpeg12_idct_5x5\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_6x6 \
asm(\
    /* Wrapper for jpeg12_idct_6x6(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_6x6\n" \
    ".type __ia2_jpeg12_idct_6x6, @function\n" \
    "__ia2_jpeg12_idct_6x6:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_6x6\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_6x6, .-__ia2_jpeg12_idct_6x6\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_7x7 \
asm(\
    /* Wrapper for jpeg12_idct_7x7(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_7x7\n" \
    ".type __ia2_jpeg12_idct_7x7, @function\n" \
    "__ia2_jpeg12_idct_7x7:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_7x7\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_7x7, .-__ia2_jpeg12_idct_7x7\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_9x9 \
asm(\
    /* Wrapper for jpeg12_idct_9x9(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_9x9\n" \
    ".type __ia2_jpeg12_idct_9x9, @function\n" \
    "__ia2_jpeg12_idct_9x9:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_9x9\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_9x9, .-__ia2_jpeg12_idct_9x9\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_float \
asm(\
    /* Wrapper for jpeg12_idct_float(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_float\n" \
    ".type __ia2_jpeg12_idct_float, @function\n" \
    "__ia2_jpeg12_idct_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_float, .-__ia2_jpeg12_idct_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_ifast \
asm(\
    /* Wrapper for jpeg12_idct_ifast(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_ifast\n" \
    ".type __ia2_jpeg12_idct_ifast, @function\n" \
    "__ia2_jpeg12_idct_ifast:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_ifast\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_ifast, .-__ia2_jpeg12_idct_ifast\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg12_idct_islow \
asm(\
    /* Wrapper for jpeg12_idct_islow(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg12_idct_islow\n" \
    ".type __ia2_jpeg12_idct_islow, @function\n" \
    "__ia2_jpeg12_idct_islow:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg12_idct_islow\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg12_idct_islow, .-__ia2_jpeg12_idct_islow\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_fdct_float \
asm(\
    /* Wrapper for jpeg_fdct_float(int): */ \
    ".text\n" \
    ".global __ia2_jpeg_fdct_float\n" \
    ".type __ia2_jpeg_fdct_float, @function\n" \
    "__ia2_jpeg_fdct_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_fdct_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_fdct_float, .-__ia2_jpeg_fdct_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_10x10 \
asm(\
    /* Wrapper for jpeg_idct_10x10(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_10x10\n" \
    ".type __ia2_jpeg_idct_10x10, @function\n" \
    "__ia2_jpeg_idct_10x10:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_10x10\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_10x10, .-__ia2_jpeg_idct_10x10\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_11x11 \
asm(\
    /* Wrapper for jpeg_idct_11x11(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_11x11\n" \
    ".type __ia2_jpeg_idct_11x11, @function\n" \
    "__ia2_jpeg_idct_11x11:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_11x11\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_11x11, .-__ia2_jpeg_idct_11x11\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_12x12 \
asm(\
    /* Wrapper for jpeg_idct_12x12(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_12x12\n" \
    ".type __ia2_jpeg_idct_12x12, @function\n" \
    "__ia2_jpeg_idct_12x12:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_12x12\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_12x12, .-__ia2_jpeg_idct_12x12\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_13x13 \
asm(\
    /* Wrapper for jpeg_idct_13x13(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_13x13\n" \
    ".type __ia2_jpeg_idct_13x13, @function\n" \
    "__ia2_jpeg_idct_13x13:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_13x13\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_13x13, .-__ia2_jpeg_idct_13x13\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_14x14 \
asm(\
    /* Wrapper for jpeg_idct_14x14(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_14x14\n" \
    ".type __ia2_jpeg_idct_14x14, @function\n" \
    "__ia2_jpeg_idct_14x14:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_14x14\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_14x14, .-__ia2_jpeg_idct_14x14\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_15x15 \
asm(\
    /* Wrapper for jpeg_idct_15x15(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_15x15\n" \
    ".type __ia2_jpeg_idct_15x15, @function\n" \
    "__ia2_jpeg_idct_15x15:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_15x15\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_15x15, .-__ia2_jpeg_idct_15x15\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_16x16 \
asm(\
    /* Wrapper for jpeg_idct_16x16(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_16x16\n" \
    ".type __ia2_jpeg_idct_16x16, @function\n" \
    "__ia2_jpeg_idct_16x16:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_16x16\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_16x16, .-__ia2_jpeg_idct_16x16\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_1x1 \
asm(\
    /* Wrapper for jpeg_idct_1x1(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_1x1\n" \
    ".type __ia2_jpeg_idct_1x1, @function\n" \
    "__ia2_jpeg_idct_1x1:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_1x1\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_1x1, .-__ia2_jpeg_idct_1x1\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_2x2 \
asm(\
    /* Wrapper for jpeg_idct_2x2(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_2x2\n" \
    ".type __ia2_jpeg_idct_2x2, @function\n" \
    "__ia2_jpeg_idct_2x2:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_2x2\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_2x2, .-__ia2_jpeg_idct_2x2\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_3x3 \
asm(\
    /* Wrapper for jpeg_idct_3x3(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_3x3\n" \
    ".type __ia2_jpeg_idct_3x3, @function\n" \
    "__ia2_jpeg_idct_3x3:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_3x3\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_3x3, .-__ia2_jpeg_idct_3x3\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_4x4 \
asm(\
    /* Wrapper for jpeg_idct_4x4(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_4x4\n" \
    ".type __ia2_jpeg_idct_4x4, @function\n" \
    "__ia2_jpeg_idct_4x4:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_4x4\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_4x4, .-__ia2_jpeg_idct_4x4\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_5x5 \
asm(\
    /* Wrapper for jpeg_idct_5x5(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_5x5\n" \
    ".type __ia2_jpeg_idct_5x5, @function\n" \
    "__ia2_jpeg_idct_5x5:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_5x5\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_5x5, .-__ia2_jpeg_idct_5x5\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_6x6 \
asm(\
    /* Wrapper for jpeg_idct_6x6(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_6x6\n" \
    ".type __ia2_jpeg_idct_6x6, @function\n" \
    "__ia2_jpeg_idct_6x6:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_6x6\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_6x6, .-__ia2_jpeg_idct_6x6\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_7x7 \
asm(\
    /* Wrapper for jpeg_idct_7x7(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_7x7\n" \
    ".type __ia2_jpeg_idct_7x7, @function\n" \
    "__ia2_jpeg_idct_7x7:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_7x7\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_7x7, .-__ia2_jpeg_idct_7x7\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_9x9 \
asm(\
    /* Wrapper for jpeg_idct_9x9(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_9x9\n" \
    ".type __ia2_jpeg_idct_9x9, @function\n" \
    "__ia2_jpeg_idct_9x9:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_9x9\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_9x9, .-__ia2_jpeg_idct_9x9\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_float \
asm(\
    /* Wrapper for jpeg_idct_float(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_float\n" \
    ".type __ia2_jpeg_idct_float, @function\n" \
    "__ia2_jpeg_idct_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_float, .-__ia2_jpeg_idct_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_ifast \
asm(\
    /* Wrapper for jpeg_idct_ifast(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_ifast\n" \
    ".type __ia2_jpeg_idct_ifast, @function\n" \
    "__ia2_jpeg_idct_ifast:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_ifast\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_ifast, .-__ia2_jpeg_idct_ifast\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_idct_islow \
asm(\
    /* Wrapper for jpeg_idct_islow(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jpeg_idct_islow\n" \
    ".type __ia2_jpeg_idct_islow, @function\n" \
    "__ia2_jpeg_idct_islow:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_idct_islow\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_idct_islow, .-__ia2_jpeg_idct_islow\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_resync_to_restart \
asm(\
    /* Wrapper for jpeg_resync_to_restart(int, int) -> int: */ \
    ".text\n" \
    ".global __ia2_jpeg_resync_to_restart\n" \
    ".type __ia2_jpeg_resync_to_restart, @function\n" \
    "__ia2_jpeg_resync_to_restart:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_resync_to_restart\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_resync_to_restart, .-__ia2_jpeg_resync_to_restart\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_convsamp \
asm(\
    /* Wrapper for jsimd_convsamp(int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_convsamp\n" \
    ".type __ia2_jsimd_convsamp, @function\n" \
    "__ia2_jsimd_convsamp:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_convsamp\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_convsamp, .-__ia2_jsimd_convsamp\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_convsamp_float \
asm(\
    /* Wrapper for jsimd_convsamp_float(int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_convsamp_float\n" \
    ".type __ia2_jsimd_convsamp_float, @function\n" \
    "__ia2_jsimd_convsamp_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_convsamp_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_convsamp_float, .-__ia2_jsimd_convsamp_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_encode_mcu_AC_first_prepare \
asm(\
    /* Wrapper for jsimd_encode_mcu_AC_first_prepare(int, int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_encode_mcu_AC_first_prepare\n" \
    ".type __ia2_jsimd_encode_mcu_AC_first_prepare, @function\n" \
    "__ia2_jsimd_encode_mcu_AC_first_prepare:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_encode_mcu_AC_first_prepare\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_encode_mcu_AC_first_prepare, .-__ia2_jsimd_encode_mcu_AC_first_prepare\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_encode_mcu_AC_refine_prepare \
asm(\
    /* Wrapper for jsimd_encode_mcu_AC_refine_prepare(int, int, int, int, int, int) -> int: */ \
    ".text\n" \
    ".global __ia2_jsimd_encode_mcu_AC_refine_prepare\n" \
    ".type __ia2_jsimd_encode_mcu_AC_refine_prepare, @function\n" \
    "__ia2_jsimd_encode_mcu_AC_refine_prepare:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_encode_mcu_AC_refine_prepare\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_encode_mcu_AC_refine_prepare, .-__ia2_jsimd_encode_mcu_AC_refine_prepare\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_fdct_float \
asm(\
    /* Wrapper for jsimd_fdct_float(int): */ \
    ".text\n" \
    ".global __ia2_jsimd_fdct_float\n" \
    ".type __ia2_jsimd_fdct_float, @function\n" \
    "__ia2_jsimd_fdct_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_fdct_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_fdct_float, .-__ia2_jsimd_fdct_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_fdct_ifast \
asm(\
    /* Wrapper for jsimd_fdct_ifast(int): */ \
    ".text\n" \
    ".global __ia2_jsimd_fdct_ifast\n" \
    ".type __ia2_jsimd_fdct_ifast, @function\n" \
    "__ia2_jsimd_fdct_ifast:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_fdct_ifast\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_fdct_ifast, .-__ia2_jsimd_fdct_ifast\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_fdct_islow \
asm(\
    /* Wrapper for jsimd_fdct_islow(int): */ \
    ".text\n" \
    ".global __ia2_jsimd_fdct_islow\n" \
    ".type __ia2_jsimd_fdct_islow, @function\n" \
    "__ia2_jsimd_fdct_islow:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_fdct_islow\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_fdct_islow, .-__ia2_jsimd_fdct_islow\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_h2v1_downsample \
asm(\
    /* Wrapper for jsimd_h2v1_downsample(int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_h2v1_downsample\n" \
    ".type __ia2_jsimd_h2v1_downsample, @function\n" \
    "__ia2_jsimd_h2v1_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_h2v1_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_h2v1_downsample, .-__ia2_jsimd_h2v1_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_h2v1_fancy_upsample \
asm(\
    /* Wrapper for jsimd_h2v1_fancy_upsample(int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_h2v1_fancy_upsample\n" \
    ".type __ia2_jsimd_h2v1_fancy_upsample, @function\n" \
    "__ia2_jsimd_h2v1_fancy_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_h2v1_fancy_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_h2v1_fancy_upsample, .-__ia2_jsimd_h2v1_fancy_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_h2v1_merged_upsample \
asm(\
    /* Wrapper for jsimd_h2v1_merged_upsample(int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_h2v1_merged_upsample\n" \
    ".type __ia2_jsimd_h2v1_merged_upsample, @function\n" \
    "__ia2_jsimd_h2v1_merged_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_h2v1_merged_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_h2v1_merged_upsample, .-__ia2_jsimd_h2v1_merged_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_h2v1_upsample \
asm(\
    /* Wrapper for jsimd_h2v1_upsample(int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_h2v1_upsample\n" \
    ".type __ia2_jsimd_h2v1_upsample, @function\n" \
    "__ia2_jsimd_h2v1_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_h2v1_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_h2v1_upsample, .-__ia2_jsimd_h2v1_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_h2v2_downsample \
asm(\
    /* Wrapper for jsimd_h2v2_downsample(int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_h2v2_downsample\n" \
    ".type __ia2_jsimd_h2v2_downsample, @function\n" \
    "__ia2_jsimd_h2v2_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_h2v2_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_h2v2_downsample, .-__ia2_jsimd_h2v2_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_h2v2_fancy_upsample \
asm(\
    /* Wrapper for jsimd_h2v2_fancy_upsample(int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_h2v2_fancy_upsample\n" \
    ".type __ia2_jsimd_h2v2_fancy_upsample, @function\n" \
    "__ia2_jsimd_h2v2_fancy_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_h2v2_fancy_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_h2v2_fancy_upsample, .-__ia2_jsimd_h2v2_fancy_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_h2v2_merged_upsample \
asm(\
    /* Wrapper for jsimd_h2v2_merged_upsample(int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_h2v2_merged_upsample\n" \
    ".type __ia2_jsimd_h2v2_merged_upsample, @function\n" \
    "__ia2_jsimd_h2v2_merged_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_h2v2_merged_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_h2v2_merged_upsample, .-__ia2_jsimd_h2v2_merged_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_h2v2_upsample \
asm(\
    /* Wrapper for jsimd_h2v2_upsample(int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_h2v2_upsample\n" \
    ".type __ia2_jsimd_h2v2_upsample, @function\n" \
    "__ia2_jsimd_h2v2_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_h2v2_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_h2v2_upsample, .-__ia2_jsimd_h2v2_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_idct_2x2 \
asm(\
    /* Wrapper for jsimd_idct_2x2(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_idct_2x2\n" \
    ".type __ia2_jsimd_idct_2x2, @function\n" \
    "__ia2_jsimd_idct_2x2:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_idct_2x2\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_idct_2x2, .-__ia2_jsimd_idct_2x2\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_idct_4x4 \
asm(\
    /* Wrapper for jsimd_idct_4x4(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_idct_4x4\n" \
    ".type __ia2_jsimd_idct_4x4, @function\n" \
    "__ia2_jsimd_idct_4x4:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_idct_4x4\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_idct_4x4, .-__ia2_jsimd_idct_4x4\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_idct_float \
asm(\
    /* Wrapper for jsimd_idct_float(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_idct_float\n" \
    ".type __ia2_jsimd_idct_float, @function\n" \
    "__ia2_jsimd_idct_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_idct_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_idct_float, .-__ia2_jsimd_idct_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_idct_ifast \
asm(\
    /* Wrapper for jsimd_idct_ifast(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_idct_ifast\n" \
    ".type __ia2_jsimd_idct_ifast, @function\n" \
    "__ia2_jsimd_idct_ifast:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_idct_ifast\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_idct_ifast, .-__ia2_jsimd_idct_ifast\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_idct_islow \
asm(\
    /* Wrapper for jsimd_idct_islow(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_idct_islow\n" \
    ".type __ia2_jsimd_idct_islow, @function\n" \
    "__ia2_jsimd_idct_islow:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_idct_islow\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_idct_islow, .-__ia2_jsimd_idct_islow\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_quantize \
asm(\
    /* Wrapper for jsimd_quantize(int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_quantize\n" \
    ".type __ia2_jsimd_quantize, @function\n" \
    "__ia2_jsimd_quantize:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_quantize\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_quantize, .-__ia2_jsimd_quantize\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_quantize_float \
asm(\
    /* Wrapper for jsimd_quantize_float(int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_quantize_float\n" \
    ".type __ia2_jsimd_quantize_float, @function\n" \
    "__ia2_jsimd_quantize_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_quantize_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_quantize_float, .-__ia2_jsimd_quantize_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_rgb_gray_convert \
asm(\
    /* Wrapper for jsimd_rgb_gray_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_rgb_gray_convert\n" \
    ".type __ia2_jsimd_rgb_gray_convert, @function\n" \
    "__ia2_jsimd_rgb_gray_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_rgb_gray_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_rgb_gray_convert, .-__ia2_jsimd_rgb_gray_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_rgb_ycc_convert \
asm(\
    /* Wrapper for jsimd_rgb_ycc_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_rgb_ycc_convert\n" \
    ".type __ia2_jsimd_rgb_ycc_convert, @function\n" \
    "__ia2_jsimd_rgb_ycc_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_rgb_ycc_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_rgb_ycc_convert, .-__ia2_jsimd_rgb_ycc_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_ycc_rgb565_convert \
asm(\
    /* Wrapper for jsimd_ycc_rgb565_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_ycc_rgb565_convert\n" \
    ".type __ia2_jsimd_ycc_rgb565_convert, @function\n" \
    "__ia2_jsimd_ycc_rgb565_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_ycc_rgb565_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_ycc_rgb565_convert, .-__ia2_jsimd_ycc_rgb565_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jsimd_ycc_rgb_convert \
asm(\
    /* Wrapper for jsimd_ycc_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".global __ia2_jsimd_ycc_rgb_convert\n" \
    ".type __ia2_jsimd_ycc_rgb_convert, @function\n" \
    "__ia2_jsimd_ycc_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jsimd_ycc_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jsimd_ycc_rgb_convert, .-__ia2_jsimd_ycc_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_skip_input_data \
asm(\
    /* Wrapper for skip_input_data(int, int): */ \
    ".text\n" \
    ".global __ia2_skip_input_data\n" \
    ".type __ia2_skip_input_data, @function\n" \
    "__ia2_skip_input_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call skip_input_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_skip_input_data, .-__ia2_skip_input_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_term_source \
asm(\
    /* Wrapper for term_source(int): */ \
    ".text\n" \
    ".global __ia2_term_source\n" \
    ".type __ia2_term_source, @function\n" \
    "__ia2_term_source:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call term_source\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_term_source, .-__ia2_term_source\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fill_input_buffer \
asm(\
    /* Wrapper for fill_input_buffer(int) -> int: */ \
    ".text\n" \
    ".local __ia2_fill_input_buffer\n" \
    ".type __ia2_fill_input_buffer, @function\n" \
    "__ia2_fill_input_buffer:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fill_input_buffer\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fill_input_buffer, .-__ia2_fill_input_buffer\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_init_source \
asm(\
    /* Wrapper for init_source(int): */ \
    ".text\n" \
    ".local __ia2_init_source\n" \
    ".type __ia2_init_source, @function\n" \
    "__ia2_init_source:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call init_source\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_init_source, .-__ia2_init_source\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_my_error_exit \
asm(\
    /* Wrapper for my_error_exit(int): */ \
    ".text\n" \
    ".local __ia2_my_error_exit\n" \
    ".type __ia2_my_error_exit, @function\n" \
    "__ia2_my_error_exit:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call my_error_exit\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_my_error_exit, .-__ia2_my_error_exit\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_progress_monitor \
asm(\
    /* Wrapper for progress_monitor(int): */ \
    ".text\n" \
    ".local __ia2_progress_monitor\n" \
    ".type __ia2_progress_monitor, @function\n" \
    "__ia2_progress_monitor:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call progress_monitor\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_progress_monitor, .-__ia2_progress_monitor\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_skip_input_data \
asm(\
    /* Wrapper for skip_input_data(int, int): */ \
    ".text\n" \
    ".local __ia2_skip_input_data\n" \
    ".type __ia2_skip_input_data, @function\n" \
    "__ia2_skip_input_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call skip_input_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_skip_input_data, .-__ia2_skip_input_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_term_source \
asm(\
    /* Wrapper for term_source(int): */ \
    ".text\n" \
    ".local __ia2_term_source\n" \
    ".type __ia2_term_source, @function\n" \
    "__ia2_term_source:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call term_source\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_term_source, .-__ia2_term_source\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_data \
asm(\
    /* Wrapper for compress_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_data\n" \
    ".type __ia2_compress_data, @function\n" \
    "__ia2_compress_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_data, .-__ia2_compress_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_data \
asm(\
    /* Wrapper for compress_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_data\n" \
    ".type __ia2_compress_data, @function\n" \
    "__ia2_compress_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_data, .-__ia2_compress_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_first_pass \
asm(\
    /* Wrapper for compress_first_pass(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_first_pass\n" \
    ".type __ia2_compress_first_pass, @function\n" \
    "__ia2_compress_first_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_first_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_first_pass, .-__ia2_compress_first_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_first_pass \
asm(\
    /* Wrapper for compress_first_pass(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_first_pass\n" \
    ".type __ia2_compress_first_pass, @function\n" \
    "__ia2_compress_first_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_first_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_first_pass, .-__ia2_compress_first_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_output \
asm(\
    /* Wrapper for compress_output(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_output\n" \
    ".type __ia2_compress_output, @function\n" \
    "__ia2_compress_output:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_output\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_output, .-__ia2_compress_output\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_output \
asm(\
    /* Wrapper for compress_output(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_output\n" \
    ".type __ia2_compress_output, @function\n" \
    "__ia2_compress_output:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_output\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_output, .-__ia2_compress_output\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_coef \
asm(\
    /* Wrapper for start_pass_coef(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_coef\n" \
    ".type __ia2_start_pass_coef, @function\n" \
    "__ia2_start_pass_coef:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_coef\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_coef, .-__ia2_start_pass_coef\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_cmyk_ycck_convert \
asm(\
    /* Wrapper for cmyk_ycck_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_cmyk_ycck_convert\n" \
    ".type __ia2_cmyk_ycck_convert, @function\n" \
    "__ia2_cmyk_ycck_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call cmyk_ycck_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_cmyk_ycck_convert, .-__ia2_cmyk_ycck_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_cmyk_ycck_convert \
asm(\
    /* Wrapper for cmyk_ycck_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_cmyk_ycck_convert\n" \
    ".type __ia2_cmyk_ycck_convert, @function\n" \
    "__ia2_cmyk_ycck_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call cmyk_ycck_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_cmyk_ycck_convert, .-__ia2_cmyk_ycck_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_cmyk_ycck_convert \
asm(\
    /* Wrapper for cmyk_ycck_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_cmyk_ycck_convert\n" \
    ".type __ia2_cmyk_ycck_convert, @function\n" \
    "__ia2_cmyk_ycck_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call cmyk_ycck_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_cmyk_ycck_convert, .-__ia2_cmyk_ycck_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_grayscale_convert \
asm(\
    /* Wrapper for grayscale_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_grayscale_convert\n" \
    ".type __ia2_grayscale_convert, @function\n" \
    "__ia2_grayscale_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call grayscale_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_grayscale_convert, .-__ia2_grayscale_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_grayscale_convert \
asm(\
    /* Wrapper for grayscale_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_grayscale_convert\n" \
    ".type __ia2_grayscale_convert, @function\n" \
    "__ia2_grayscale_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call grayscale_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_grayscale_convert, .-__ia2_grayscale_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_grayscale_convert \
asm(\
    /* Wrapper for grayscale_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_grayscale_convert\n" \
    ".type __ia2_grayscale_convert, @function\n" \
    "__ia2_grayscale_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call grayscale_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_grayscale_convert, .-__ia2_grayscale_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_null_convert \
asm(\
    /* Wrapper for null_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_null_convert\n" \
    ".type __ia2_null_convert, @function\n" \
    "__ia2_null_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call null_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_null_convert, .-__ia2_null_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_null_convert \
asm(\
    /* Wrapper for null_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_null_convert\n" \
    ".type __ia2_null_convert, @function\n" \
    "__ia2_null_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call null_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_null_convert, .-__ia2_null_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_null_convert \
asm(\
    /* Wrapper for null_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_null_convert\n" \
    ".type __ia2_null_convert, @function\n" \
    "__ia2_null_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call null_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_null_convert, .-__ia2_null_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_null_method \
asm(\
    /* Wrapper for null_method(int): */ \
    ".text\n" \
    ".local __ia2_null_method\n" \
    ".type __ia2_null_method, @function\n" \
    "__ia2_null_method:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call null_method\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_null_method, .-__ia2_null_method\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_gray_convert \
asm(\
    /* Wrapper for rgb_gray_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_gray_convert\n" \
    ".type __ia2_rgb_gray_convert, @function\n" \
    "__ia2_rgb_gray_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_gray_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_gray_convert, .-__ia2_rgb_gray_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_gray_convert \
asm(\
    /* Wrapper for rgb_gray_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_gray_convert\n" \
    ".type __ia2_rgb_gray_convert, @function\n" \
    "__ia2_rgb_gray_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_gray_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_gray_convert, .-__ia2_rgb_gray_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_gray_convert \
asm(\
    /* Wrapper for rgb_gray_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_gray_convert\n" \
    ".type __ia2_rgb_gray_convert, @function\n" \
    "__ia2_rgb_gray_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_gray_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_gray_convert, .-__ia2_rgb_gray_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb_convert \
asm(\
    /* Wrapper for rgb_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb_convert\n" \
    ".type __ia2_rgb_rgb_convert, @function\n" \
    "__ia2_rgb_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb_convert, .-__ia2_rgb_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb_convert \
asm(\
    /* Wrapper for rgb_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb_convert\n" \
    ".type __ia2_rgb_rgb_convert, @function\n" \
    "__ia2_rgb_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb_convert, .-__ia2_rgb_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb_convert \
asm(\
    /* Wrapper for rgb_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb_convert\n" \
    ".type __ia2_rgb_rgb_convert, @function\n" \
    "__ia2_rgb_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb_convert, .-__ia2_rgb_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_ycc_convert \
asm(\
    /* Wrapper for rgb_ycc_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_ycc_convert\n" \
    ".type __ia2_rgb_ycc_convert, @function\n" \
    "__ia2_rgb_ycc_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_ycc_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_ycc_convert, .-__ia2_rgb_ycc_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_ycc_convert \
asm(\
    /* Wrapper for rgb_ycc_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_ycc_convert\n" \
    ".type __ia2_rgb_ycc_convert, @function\n" \
    "__ia2_rgb_ycc_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_ycc_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_ycc_convert, .-__ia2_rgb_ycc_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_ycc_convert \
asm(\
    /* Wrapper for rgb_ycc_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_ycc_convert\n" \
    ".type __ia2_rgb_ycc_convert, @function\n" \
    "__ia2_rgb_ycc_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_ycc_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_ycc_convert, .-__ia2_rgb_ycc_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_ycc_start \
asm(\
    /* Wrapper for rgb_ycc_start(int): */ \
    ".text\n" \
    ".local __ia2_rgb_ycc_start\n" \
    ".type __ia2_rgb_ycc_start, @function\n" \
    "__ia2_rgb_ycc_start:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_ycc_start\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_ycc_start, .-__ia2_rgb_ycc_start\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_convsamp \
asm(\
    /* Wrapper for convsamp(int, int, int): */ \
    ".text\n" \
    ".local __ia2_convsamp\n" \
    ".type __ia2_convsamp, @function\n" \
    "__ia2_convsamp:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call convsamp\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_convsamp, .-__ia2_convsamp\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_convsamp \
asm(\
    /* Wrapper for convsamp(int, int, int): */ \
    ".text\n" \
    ".local __ia2_convsamp\n" \
    ".type __ia2_convsamp, @function\n" \
    "__ia2_convsamp:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call convsamp\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_convsamp, .-__ia2_convsamp\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_convsamp_float \
asm(\
    /* Wrapper for convsamp_float(int, int, int): */ \
    ".text\n" \
    ".local __ia2_convsamp_float\n" \
    ".type __ia2_convsamp_float, @function\n" \
    "__ia2_convsamp_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call convsamp_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_convsamp_float, .-__ia2_convsamp_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_convsamp_float \
asm(\
    /* Wrapper for convsamp_float(int, int, int): */ \
    ".text\n" \
    ".local __ia2_convsamp_float\n" \
    ".type __ia2_convsamp_float, @function\n" \
    "__ia2_convsamp_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call convsamp_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_convsamp_float, .-__ia2_convsamp_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_forward_DCT \
asm(\
    /* Wrapper for forward_DCT(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_forward_DCT\n" \
    ".type __ia2_forward_DCT, @function\n" \
    "__ia2_forward_DCT:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call forward_DCT\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_forward_DCT, .-__ia2_forward_DCT\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_forward_DCT \
asm(\
    /* Wrapper for forward_DCT(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_forward_DCT\n" \
    ".type __ia2_forward_DCT, @function\n" \
    "__ia2_forward_DCT:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call forward_DCT\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_forward_DCT, .-__ia2_forward_DCT\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_forward_DCT_float \
asm(\
    /* Wrapper for forward_DCT_float(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_forward_DCT_float\n" \
    ".type __ia2_forward_DCT_float, @function\n" \
    "__ia2_forward_DCT_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call forward_DCT_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_forward_DCT_float, .-__ia2_forward_DCT_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_forward_DCT_float \
asm(\
    /* Wrapper for forward_DCT_float(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_forward_DCT_float\n" \
    ".type __ia2_forward_DCT_float, @function\n" \
    "__ia2_forward_DCT_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call forward_DCT_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_forward_DCT_float, .-__ia2_forward_DCT_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_quantize \
asm(\
    /* Wrapper for quantize(int, int, int): */ \
    ".text\n" \
    ".local __ia2_quantize\n" \
    ".type __ia2_quantize, @function\n" \
    "__ia2_quantize:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call quantize\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_quantize, .-__ia2_quantize\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_quantize \
asm(\
    /* Wrapper for quantize(int, int, int): */ \
    ".text\n" \
    ".local __ia2_quantize\n" \
    ".type __ia2_quantize, @function\n" \
    "__ia2_quantize:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call quantize\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_quantize, .-__ia2_quantize\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_quantize_float \
asm(\
    /* Wrapper for quantize_float(int, int, int): */ \
    ".text\n" \
    ".local __ia2_quantize_float\n" \
    ".type __ia2_quantize_float, @function\n" \
    "__ia2_quantize_float:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call quantize_float\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_quantize_float, .-__ia2_quantize_float\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_fdctmgr \
asm(\
    /* Wrapper for start_pass_fdctmgr(int): */ \
    ".text\n" \
    ".local __ia2_start_pass_fdctmgr\n" \
    ".type __ia2_start_pass_fdctmgr, @function\n" \
    "__ia2_start_pass_fdctmgr:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_fdctmgr\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_fdctmgr, .-__ia2_start_pass_fdctmgr\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_data \
asm(\
    /* Wrapper for compress_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_data\n" \
    ".type __ia2_compress_data, @function\n" \
    "__ia2_compress_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_data, .-__ia2_compress_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_data \
asm(\
    /* Wrapper for compress_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_data\n" \
    ".type __ia2_compress_data, @function\n" \
    "__ia2_compress_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_data, .-__ia2_compress_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_data \
asm(\
    /* Wrapper for compress_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_data\n" \
    ".type __ia2_compress_data, @function\n" \
    "__ia2_compress_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_data, .-__ia2_compress_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_first_pass \
asm(\
    /* Wrapper for compress_first_pass(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_first_pass\n" \
    ".type __ia2_compress_first_pass, @function\n" \
    "__ia2_compress_first_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_first_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_first_pass, .-__ia2_compress_first_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_first_pass \
asm(\
    /* Wrapper for compress_first_pass(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_first_pass\n" \
    ".type __ia2_compress_first_pass, @function\n" \
    "__ia2_compress_first_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_first_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_first_pass, .-__ia2_compress_first_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_first_pass \
asm(\
    /* Wrapper for compress_first_pass(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_first_pass\n" \
    ".type __ia2_compress_first_pass, @function\n" \
    "__ia2_compress_first_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_first_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_first_pass, .-__ia2_compress_first_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_output \
asm(\
    /* Wrapper for compress_output(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_output\n" \
    ".type __ia2_compress_output, @function\n" \
    "__ia2_compress_output:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_output\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_output, .-__ia2_compress_output\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_output \
asm(\
    /* Wrapper for compress_output(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_output\n" \
    ".type __ia2_compress_output, @function\n" \
    "__ia2_compress_output:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_output\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_output, .-__ia2_compress_output\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_output \
asm(\
    /* Wrapper for compress_output(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_output\n" \
    ".type __ia2_compress_output, @function\n" \
    "__ia2_compress_output:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_output\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_output, .-__ia2_compress_output\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_diff \
asm(\
    /* Wrapper for start_pass_diff(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_diff\n" \
    ".type __ia2_start_pass_diff, @function\n" \
    "__ia2_start_pass_diff:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_diff\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_diff, .-__ia2_start_pass_diff\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_encode_mcu_gather \
asm(\
    /* Wrapper for encode_mcu_gather(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_encode_mcu_gather\n" \
    ".type __ia2_encode_mcu_gather, @function\n" \
    "__ia2_encode_mcu_gather:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call encode_mcu_gather\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_encode_mcu_gather, .-__ia2_encode_mcu_gather\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_encode_mcu_huff \
asm(\
    /* Wrapper for encode_mcu_huff(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_encode_mcu_huff\n" \
    ".type __ia2_encode_mcu_huff, @function\n" \
    "__ia2_encode_mcu_huff:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call encode_mcu_huff\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_encode_mcu_huff, .-__ia2_encode_mcu_huff\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_pass_gather \
asm(\
    /* Wrapper for finish_pass_gather(int): */ \
    ".text\n" \
    ".local __ia2_finish_pass_gather\n" \
    ".type __ia2_finish_pass_gather, @function\n" \
    "__ia2_finish_pass_gather:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_pass_gather\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_pass_gather, .-__ia2_finish_pass_gather\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_pass_huff \
asm(\
    /* Wrapper for finish_pass_huff(int): */ \
    ".text\n" \
    ".local __ia2_finish_pass_huff\n" \
    ".type __ia2_finish_pass_huff, @function\n" \
    "__ia2_finish_pass_huff:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_pass_huff\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_pass_huff, .-__ia2_finish_pass_huff\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_huff \
asm(\
    /* Wrapper for start_pass_huff(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_huff\n" \
    ".type __ia2_start_pass_huff, @function\n" \
    "__ia2_start_pass_huff:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_huff\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_huff, .-__ia2_start_pass_huff\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_encode_mcus_gather \
asm(\
    /* Wrapper for encode_mcus_gather(int, int, int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_encode_mcus_gather\n" \
    ".type __ia2_encode_mcus_gather, @function\n" \
    "__ia2_encode_mcus_gather:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call encode_mcus_gather\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_encode_mcus_gather, .-__ia2_encode_mcus_gather\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_encode_mcus_huff \
asm(\
    /* Wrapper for encode_mcus_huff(int, int, int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_encode_mcus_huff\n" \
    ".type __ia2_encode_mcus_huff, @function\n" \
    "__ia2_encode_mcus_huff:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call encode_mcus_huff\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_encode_mcus_huff, .-__ia2_encode_mcus_huff\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_pass_gather \
asm(\
    /* Wrapper for finish_pass_gather(int): */ \
    ".text\n" \
    ".local __ia2_finish_pass_gather\n" \
    ".type __ia2_finish_pass_gather, @function\n" \
    "__ia2_finish_pass_gather:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_pass_gather\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_pass_gather, .-__ia2_finish_pass_gather\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_pass_huff \
asm(\
    /* Wrapper for finish_pass_huff(int): */ \
    ".text\n" \
    ".local __ia2_finish_pass_huff\n" \
    ".type __ia2_finish_pass_huff, @function\n" \
    "__ia2_finish_pass_huff:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_pass_huff\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_pass_huff, .-__ia2_finish_pass_huff\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_lhuff \
asm(\
    /* Wrapper for start_pass_lhuff(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_lhuff\n" \
    ".type __ia2_start_pass_lhuff, @function\n" \
    "__ia2_start_pass_lhuff:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_lhuff\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_lhuff, .-__ia2_start_pass_lhuff\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference1 \
asm(\
    /* Wrapper for jpeg_difference1(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference1\n" \
    ".type __ia2_jpeg_difference1, @function\n" \
    "__ia2_jpeg_difference1:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference1\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference1, .-__ia2_jpeg_difference1\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference1 \
asm(\
    /* Wrapper for jpeg_difference1(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference1\n" \
    ".type __ia2_jpeg_difference1, @function\n" \
    "__ia2_jpeg_difference1:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference1\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference1, .-__ia2_jpeg_difference1\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference1 \
asm(\
    /* Wrapper for jpeg_difference1(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference1\n" \
    ".type __ia2_jpeg_difference1, @function\n" \
    "__ia2_jpeg_difference1:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference1\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference1, .-__ia2_jpeg_difference1\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference2 \
asm(\
    /* Wrapper for jpeg_difference2(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference2\n" \
    ".type __ia2_jpeg_difference2, @function\n" \
    "__ia2_jpeg_difference2:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference2\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference2, .-__ia2_jpeg_difference2\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference2 \
asm(\
    /* Wrapper for jpeg_difference2(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference2\n" \
    ".type __ia2_jpeg_difference2, @function\n" \
    "__ia2_jpeg_difference2:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference2\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference2, .-__ia2_jpeg_difference2\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference2 \
asm(\
    /* Wrapper for jpeg_difference2(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference2\n" \
    ".type __ia2_jpeg_difference2, @function\n" \
    "__ia2_jpeg_difference2:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference2\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference2, .-__ia2_jpeg_difference2\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference3 \
asm(\
    /* Wrapper for jpeg_difference3(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference3\n" \
    ".type __ia2_jpeg_difference3, @function\n" \
    "__ia2_jpeg_difference3:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference3\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference3, .-__ia2_jpeg_difference3\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference3 \
asm(\
    /* Wrapper for jpeg_difference3(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference3\n" \
    ".type __ia2_jpeg_difference3, @function\n" \
    "__ia2_jpeg_difference3:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference3\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference3, .-__ia2_jpeg_difference3\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference3 \
asm(\
    /* Wrapper for jpeg_difference3(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference3\n" \
    ".type __ia2_jpeg_difference3, @function\n" \
    "__ia2_jpeg_difference3:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference3\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference3, .-__ia2_jpeg_difference3\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference4 \
asm(\
    /* Wrapper for jpeg_difference4(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference4\n" \
    ".type __ia2_jpeg_difference4, @function\n" \
    "__ia2_jpeg_difference4:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference4\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference4, .-__ia2_jpeg_difference4\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference4 \
asm(\
    /* Wrapper for jpeg_difference4(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference4\n" \
    ".type __ia2_jpeg_difference4, @function\n" \
    "__ia2_jpeg_difference4:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference4\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference4, .-__ia2_jpeg_difference4\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference4 \
asm(\
    /* Wrapper for jpeg_difference4(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference4\n" \
    ".type __ia2_jpeg_difference4, @function\n" \
    "__ia2_jpeg_difference4:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference4\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference4, .-__ia2_jpeg_difference4\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference5 \
asm(\
    /* Wrapper for jpeg_difference5(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference5\n" \
    ".type __ia2_jpeg_difference5, @function\n" \
    "__ia2_jpeg_difference5:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference5\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference5, .-__ia2_jpeg_difference5\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference5 \
asm(\
    /* Wrapper for jpeg_difference5(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference5\n" \
    ".type __ia2_jpeg_difference5, @function\n" \
    "__ia2_jpeg_difference5:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference5\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference5, .-__ia2_jpeg_difference5\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference5 \
asm(\
    /* Wrapper for jpeg_difference5(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference5\n" \
    ".type __ia2_jpeg_difference5, @function\n" \
    "__ia2_jpeg_difference5:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference5\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference5, .-__ia2_jpeg_difference5\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference6 \
asm(\
    /* Wrapper for jpeg_difference6(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference6\n" \
    ".type __ia2_jpeg_difference6, @function\n" \
    "__ia2_jpeg_difference6:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference6\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference6, .-__ia2_jpeg_difference6\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference6 \
asm(\
    /* Wrapper for jpeg_difference6(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference6\n" \
    ".type __ia2_jpeg_difference6, @function\n" \
    "__ia2_jpeg_difference6:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference6\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference6, .-__ia2_jpeg_difference6\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference6 \
asm(\
    /* Wrapper for jpeg_difference6(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference6\n" \
    ".type __ia2_jpeg_difference6, @function\n" \
    "__ia2_jpeg_difference6:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference6\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference6, .-__ia2_jpeg_difference6\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference7 \
asm(\
    /* Wrapper for jpeg_difference7(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference7\n" \
    ".type __ia2_jpeg_difference7, @function\n" \
    "__ia2_jpeg_difference7:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference7\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference7, .-__ia2_jpeg_difference7\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference7 \
asm(\
    /* Wrapper for jpeg_difference7(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference7\n" \
    ".type __ia2_jpeg_difference7, @function\n" \
    "__ia2_jpeg_difference7:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference7\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference7, .-__ia2_jpeg_difference7\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference7 \
asm(\
    /* Wrapper for jpeg_difference7(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference7\n" \
    ".type __ia2_jpeg_difference7, @function\n" \
    "__ia2_jpeg_difference7:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference7\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference7, .-__ia2_jpeg_difference7\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference_first_row \
asm(\
    /* Wrapper for jpeg_difference_first_row(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference_first_row\n" \
    ".type __ia2_jpeg_difference_first_row, @function\n" \
    "__ia2_jpeg_difference_first_row:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference_first_row\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference_first_row, .-__ia2_jpeg_difference_first_row\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference_first_row \
asm(\
    /* Wrapper for jpeg_difference_first_row(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference_first_row\n" \
    ".type __ia2_jpeg_difference_first_row, @function\n" \
    "__ia2_jpeg_difference_first_row:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference_first_row\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference_first_row, .-__ia2_jpeg_difference_first_row\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_difference_first_row \
asm(\
    /* Wrapper for jpeg_difference_first_row(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_difference_first_row\n" \
    ".type __ia2_jpeg_difference_first_row, @function\n" \
    "__ia2_jpeg_difference_first_row:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_difference_first_row\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_difference_first_row, .-__ia2_jpeg_difference_first_row\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noscale \
asm(\
    /* Wrapper for noscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noscale\n" \
    ".type __ia2_noscale, @function\n" \
    "__ia2_noscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noscale, .-__ia2_noscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noscale \
asm(\
    /* Wrapper for noscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noscale\n" \
    ".type __ia2_noscale, @function\n" \
    "__ia2_noscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noscale, .-__ia2_noscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noscale \
asm(\
    /* Wrapper for noscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noscale\n" \
    ".type __ia2_noscale, @function\n" \
    "__ia2_noscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noscale, .-__ia2_noscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_simple_downscale \
asm(\
    /* Wrapper for simple_downscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_simple_downscale\n" \
    ".type __ia2_simple_downscale, @function\n" \
    "__ia2_simple_downscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call simple_downscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_simple_downscale, .-__ia2_simple_downscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_simple_downscale \
asm(\
    /* Wrapper for simple_downscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_simple_downscale\n" \
    ".type __ia2_simple_downscale, @function\n" \
    "__ia2_simple_downscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call simple_downscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_simple_downscale, .-__ia2_simple_downscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_simple_downscale \
asm(\
    /* Wrapper for simple_downscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_simple_downscale\n" \
    ".type __ia2_simple_downscale, @function\n" \
    "__ia2_simple_downscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call simple_downscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_simple_downscale, .-__ia2_simple_downscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_lossless \
asm(\
    /* Wrapper for start_pass_lossless(int): */ \
    ".text\n" \
    ".local __ia2_start_pass_lossless\n" \
    ".type __ia2_start_pass_lossless, @function\n" \
    "__ia2_start_pass_lossless:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_lossless\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_lossless, .-__ia2_start_pass_lossless\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_simple_main \
asm(\
    /* Wrapper for process_data_simple_main(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_simple_main\n" \
    ".type __ia2_process_data_simple_main, @function\n" \
    "__ia2_process_data_simple_main:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_simple_main\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_simple_main, .-__ia2_process_data_simple_main\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_simple_main \
asm(\
    /* Wrapper for process_data_simple_main(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_simple_main\n" \
    ".type __ia2_process_data_simple_main, @function\n" \
    "__ia2_process_data_simple_main:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_simple_main\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_simple_main, .-__ia2_process_data_simple_main\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_simple_main \
asm(\
    /* Wrapper for process_data_simple_main(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_simple_main\n" \
    ".type __ia2_process_data_simple_main, @function\n" \
    "__ia2_process_data_simple_main:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_simple_main\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_simple_main, .-__ia2_process_data_simple_main\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_main \
asm(\
    /* Wrapper for start_pass_main(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_main\n" \
    ".type __ia2_start_pass_main, @function\n" \
    "__ia2_start_pass_main:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_main\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_main, .-__ia2_start_pass_main\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_write_file_header \
asm(\
    /* Wrapper for write_file_header(int): */ \
    ".text\n" \
    ".local __ia2_write_file_header\n" \
    ".type __ia2_write_file_header, @function\n" \
    "__ia2_write_file_header:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call write_file_header\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_write_file_header, .-__ia2_write_file_header\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_write_file_trailer \
asm(\
    /* Wrapper for write_file_trailer(int): */ \
    ".text\n" \
    ".local __ia2_write_file_trailer\n" \
    ".type __ia2_write_file_trailer, @function\n" \
    "__ia2_write_file_trailer:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call write_file_trailer\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_write_file_trailer, .-__ia2_write_file_trailer\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_write_frame_header \
asm(\
    /* Wrapper for write_frame_header(int): */ \
    ".text\n" \
    ".local __ia2_write_frame_header\n" \
    ".type __ia2_write_frame_header, @function\n" \
    "__ia2_write_frame_header:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call write_frame_header\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_write_frame_header, .-__ia2_write_frame_header\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_write_marker_byte \
asm(\
    /* Wrapper for write_marker_byte(int, int): */ \
    ".text\n" \
    ".local __ia2_write_marker_byte\n" \
    ".type __ia2_write_marker_byte, @function\n" \
    "__ia2_write_marker_byte:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call write_marker_byte\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_write_marker_byte, .-__ia2_write_marker_byte\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_write_marker_header \
asm(\
    /* Wrapper for write_marker_header(int, int, int): */ \
    ".text\n" \
    ".local __ia2_write_marker_header\n" \
    ".type __ia2_write_marker_header, @function\n" \
    "__ia2_write_marker_header:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call write_marker_header\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_write_marker_header, .-__ia2_write_marker_header\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_write_scan_header \
asm(\
    /* Wrapper for write_scan_header(int): */ \
    ".text\n" \
    ".local __ia2_write_scan_header\n" \
    ".type __ia2_write_scan_header, @function\n" \
    "__ia2_write_scan_header:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call write_scan_header\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_write_scan_header, .-__ia2_write_scan_header\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_write_tables_only \
asm(\
    /* Wrapper for write_tables_only(int): */ \
    ".text\n" \
    ".local __ia2_write_tables_only\n" \
    ".type __ia2_write_tables_only, @function\n" \
    "__ia2_write_tables_only:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call write_tables_only\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_write_tables_only, .-__ia2_write_tables_only\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_pass_master \
asm(\
    /* Wrapper for finish_pass_master(int): */ \
    ".text\n" \
    ".local __ia2_finish_pass_master\n" \
    ".type __ia2_finish_pass_master, @function\n" \
    "__ia2_finish_pass_master:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_pass_master\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_pass_master, .-__ia2_finish_pass_master\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_pass_startup \
asm(\
    /* Wrapper for pass_startup(int): */ \
    ".text\n" \
    ".local __ia2_pass_startup\n" \
    ".type __ia2_pass_startup, @function\n" \
    "__ia2_pass_startup:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call pass_startup\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_pass_startup, .-__ia2_pass_startup\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_prepare_for_pass \
asm(\
    /* Wrapper for prepare_for_pass(int): */ \
    ".text\n" \
    ".local __ia2_prepare_for_pass\n" \
    ".type __ia2_prepare_for_pass, @function\n" \
    "__ia2_prepare_for_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call prepare_for_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_prepare_for_pass, .-__ia2_prepare_for_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_encode_mcu_AC_first \
asm(\
    /* Wrapper for encode_mcu_AC_first(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_encode_mcu_AC_first\n" \
    ".type __ia2_encode_mcu_AC_first, @function\n" \
    "__ia2_encode_mcu_AC_first:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call encode_mcu_AC_first\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_encode_mcu_AC_first, .-__ia2_encode_mcu_AC_first\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_encode_mcu_AC_first_prepare \
asm(\
    /* Wrapper for encode_mcu_AC_first_prepare(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_encode_mcu_AC_first_prepare\n" \
    ".type __ia2_encode_mcu_AC_first_prepare, @function\n" \
    "__ia2_encode_mcu_AC_first_prepare:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call encode_mcu_AC_first_prepare\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_encode_mcu_AC_first_prepare, .-__ia2_encode_mcu_AC_first_prepare\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_encode_mcu_AC_refine \
asm(\
    /* Wrapper for encode_mcu_AC_refine(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_encode_mcu_AC_refine\n" \
    ".type __ia2_encode_mcu_AC_refine, @function\n" \
    "__ia2_encode_mcu_AC_refine:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call encode_mcu_AC_refine\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_encode_mcu_AC_refine, .-__ia2_encode_mcu_AC_refine\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_encode_mcu_AC_refine_prepare \
asm(\
    /* Wrapper for encode_mcu_AC_refine_prepare(int, int, int, int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_encode_mcu_AC_refine_prepare\n" \
    ".type __ia2_encode_mcu_AC_refine_prepare, @function\n" \
    "__ia2_encode_mcu_AC_refine_prepare:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call encode_mcu_AC_refine_prepare\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_encode_mcu_AC_refine_prepare, .-__ia2_encode_mcu_AC_refine_prepare\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_encode_mcu_DC_first \
asm(\
    /* Wrapper for encode_mcu_DC_first(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_encode_mcu_DC_first\n" \
    ".type __ia2_encode_mcu_DC_first, @function\n" \
    "__ia2_encode_mcu_DC_first:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call encode_mcu_DC_first\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_encode_mcu_DC_first, .-__ia2_encode_mcu_DC_first\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_encode_mcu_DC_refine \
asm(\
    /* Wrapper for encode_mcu_DC_refine(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_encode_mcu_DC_refine\n" \
    ".type __ia2_encode_mcu_DC_refine, @function\n" \
    "__ia2_encode_mcu_DC_refine:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call encode_mcu_DC_refine\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_encode_mcu_DC_refine, .-__ia2_encode_mcu_DC_refine\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_pass_gather_phuff \
asm(\
    /* Wrapper for finish_pass_gather_phuff(int): */ \
    ".text\n" \
    ".local __ia2_finish_pass_gather_phuff\n" \
    ".type __ia2_finish_pass_gather_phuff, @function\n" \
    "__ia2_finish_pass_gather_phuff:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_pass_gather_phuff\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_pass_gather_phuff, .-__ia2_finish_pass_gather_phuff\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_pass_phuff \
asm(\
    /* Wrapper for finish_pass_phuff(int): */ \
    ".text\n" \
    ".local __ia2_finish_pass_phuff\n" \
    ".type __ia2_finish_pass_phuff, @function\n" \
    "__ia2_finish_pass_phuff:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_pass_phuff\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_pass_phuff, .-__ia2_finish_pass_phuff\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_phuff \
asm(\
    /* Wrapper for start_pass_phuff(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_phuff\n" \
    ".type __ia2_start_pass_phuff, @function\n" \
    "__ia2_start_pass_phuff:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_phuff\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_phuff, .-__ia2_start_pass_phuff\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_pre_process_context \
asm(\
    /* Wrapper for pre_process_context(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_pre_process_context\n" \
    ".type __ia2_pre_process_context, @function\n" \
    "__ia2_pre_process_context:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call pre_process_context\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_pre_process_context, .-__ia2_pre_process_context\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_pre_process_context \
asm(\
    /* Wrapper for pre_process_context(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_pre_process_context\n" \
    ".type __ia2_pre_process_context, @function\n" \
    "__ia2_pre_process_context:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call pre_process_context\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_pre_process_context, .-__ia2_pre_process_context\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_pre_process_context \
asm(\
    /* Wrapper for pre_process_context(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_pre_process_context\n" \
    ".type __ia2_pre_process_context, @function\n" \
    "__ia2_pre_process_context:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call pre_process_context\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_pre_process_context, .-__ia2_pre_process_context\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_pre_process_data \
asm(\
    /* Wrapper for pre_process_data(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_pre_process_data\n" \
    ".type __ia2_pre_process_data, @function\n" \
    "__ia2_pre_process_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call pre_process_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_pre_process_data, .-__ia2_pre_process_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_pre_process_data \
asm(\
    /* Wrapper for pre_process_data(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_pre_process_data\n" \
    ".type __ia2_pre_process_data, @function\n" \
    "__ia2_pre_process_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call pre_process_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_pre_process_data, .-__ia2_pre_process_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_pre_process_data \
asm(\
    /* Wrapper for pre_process_data(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_pre_process_data\n" \
    ".type __ia2_pre_process_data, @function\n" \
    "__ia2_pre_process_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call pre_process_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_pre_process_data, .-__ia2_pre_process_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_prep \
asm(\
    /* Wrapper for start_pass_prep(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_prep\n" \
    ".type __ia2_start_pass_prep, @function\n" \
    "__ia2_start_pass_prep:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_prep\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_prep, .-__ia2_start_pass_prep\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fullsize_downsample \
asm(\
    /* Wrapper for fullsize_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_fullsize_downsample\n" \
    ".type __ia2_fullsize_downsample, @function\n" \
    "__ia2_fullsize_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fullsize_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fullsize_downsample, .-__ia2_fullsize_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fullsize_downsample \
asm(\
    /* Wrapper for fullsize_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_fullsize_downsample\n" \
    ".type __ia2_fullsize_downsample, @function\n" \
    "__ia2_fullsize_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fullsize_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fullsize_downsample, .-__ia2_fullsize_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fullsize_downsample \
asm(\
    /* Wrapper for fullsize_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_fullsize_downsample\n" \
    ".type __ia2_fullsize_downsample, @function\n" \
    "__ia2_fullsize_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fullsize_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fullsize_downsample, .-__ia2_fullsize_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fullsize_smooth_downsample \
asm(\
    /* Wrapper for fullsize_smooth_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_fullsize_smooth_downsample\n" \
    ".type __ia2_fullsize_smooth_downsample, @function\n" \
    "__ia2_fullsize_smooth_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fullsize_smooth_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fullsize_smooth_downsample, .-__ia2_fullsize_smooth_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fullsize_smooth_downsample \
asm(\
    /* Wrapper for fullsize_smooth_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_fullsize_smooth_downsample\n" \
    ".type __ia2_fullsize_smooth_downsample, @function\n" \
    "__ia2_fullsize_smooth_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fullsize_smooth_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fullsize_smooth_downsample, .-__ia2_fullsize_smooth_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fullsize_smooth_downsample \
asm(\
    /* Wrapper for fullsize_smooth_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_fullsize_smooth_downsample\n" \
    ".type __ia2_fullsize_smooth_downsample, @function\n" \
    "__ia2_fullsize_smooth_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fullsize_smooth_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fullsize_smooth_downsample, .-__ia2_fullsize_smooth_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_downsample \
asm(\
    /* Wrapper for h2v1_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_downsample\n" \
    ".type __ia2_h2v1_downsample, @function\n" \
    "__ia2_h2v1_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_downsample, .-__ia2_h2v1_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_downsample \
asm(\
    /* Wrapper for h2v1_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_downsample\n" \
    ".type __ia2_h2v1_downsample, @function\n" \
    "__ia2_h2v1_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_downsample, .-__ia2_h2v1_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_downsample \
asm(\
    /* Wrapper for h2v1_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_downsample\n" \
    ".type __ia2_h2v1_downsample, @function\n" \
    "__ia2_h2v1_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_downsample, .-__ia2_h2v1_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_downsample \
asm(\
    /* Wrapper for h2v2_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_downsample\n" \
    ".type __ia2_h2v2_downsample, @function\n" \
    "__ia2_h2v2_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_downsample, .-__ia2_h2v2_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_downsample \
asm(\
    /* Wrapper for h2v2_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_downsample\n" \
    ".type __ia2_h2v2_downsample, @function\n" \
    "__ia2_h2v2_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_downsample, .-__ia2_h2v2_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_downsample \
asm(\
    /* Wrapper for h2v2_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_downsample\n" \
    ".type __ia2_h2v2_downsample, @function\n" \
    "__ia2_h2v2_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_downsample, .-__ia2_h2v2_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_smooth_downsample \
asm(\
    /* Wrapper for h2v2_smooth_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_smooth_downsample\n" \
    ".type __ia2_h2v2_smooth_downsample, @function\n" \
    "__ia2_h2v2_smooth_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_smooth_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_smooth_downsample, .-__ia2_h2v2_smooth_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_smooth_downsample \
asm(\
    /* Wrapper for h2v2_smooth_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_smooth_downsample\n" \
    ".type __ia2_h2v2_smooth_downsample, @function\n" \
    "__ia2_h2v2_smooth_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_smooth_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_smooth_downsample, .-__ia2_h2v2_smooth_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_smooth_downsample \
asm(\
    /* Wrapper for h2v2_smooth_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_smooth_downsample\n" \
    ".type __ia2_h2v2_smooth_downsample, @function\n" \
    "__ia2_h2v2_smooth_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_smooth_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_smooth_downsample, .-__ia2_h2v2_smooth_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_int_downsample \
asm(\
    /* Wrapper for int_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_int_downsample\n" \
    ".type __ia2_int_downsample, @function\n" \
    "__ia2_int_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call int_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_int_downsample, .-__ia2_int_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_int_downsample \
asm(\
    /* Wrapper for int_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_int_downsample\n" \
    ".type __ia2_int_downsample, @function\n" \
    "__ia2_int_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call int_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_int_downsample, .-__ia2_int_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_int_downsample \
asm(\
    /* Wrapper for int_downsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_int_downsample\n" \
    ".type __ia2_int_downsample, @function\n" \
    "__ia2_int_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call int_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_int_downsample, .-__ia2_int_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_sep_downsample \
asm(\
    /* Wrapper for sep_downsample(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_sep_downsample\n" \
    ".type __ia2_sep_downsample, @function\n" \
    "__ia2_sep_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call sep_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_sep_downsample, .-__ia2_sep_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_sep_downsample \
asm(\
    /* Wrapper for sep_downsample(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_sep_downsample\n" \
    ".type __ia2_sep_downsample, @function\n" \
    "__ia2_sep_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call sep_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_sep_downsample, .-__ia2_sep_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_sep_downsample \
asm(\
    /* Wrapper for sep_downsample(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_sep_downsample\n" \
    ".type __ia2_sep_downsample, @function\n" \
    "__ia2_sep_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call sep_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_sep_downsample, .-__ia2_sep_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_downsample \
asm(\
    /* Wrapper for start_pass_downsample(int): */ \
    ".text\n" \
    ".local __ia2_start_pass_downsample\n" \
    ".type __ia2_start_pass_downsample, @function\n" \
    "__ia2_start_pass_downsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_downsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_downsample, .-__ia2_start_pass_downsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_output \
asm(\
    /* Wrapper for compress_output(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_output\n" \
    ".type __ia2_compress_output, @function\n" \
    "__ia2_compress_output:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_output\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_output, .-__ia2_compress_output\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_compress_output_12 \
asm(\
    /* Wrapper for compress_output_12(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_compress_output_12\n" \
    ".type __ia2_compress_output_12, @function\n" \
    "__ia2_compress_output_12:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call compress_output_12\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_compress_output_12, .-__ia2_compress_output_12\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_coef \
asm(\
    /* Wrapper for start_pass_coef(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_coef\n" \
    ".type __ia2_start_pass_coef, @function\n" \
    "__ia2_start_pass_coef:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_coef\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_coef, .-__ia2_start_pass_coef\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noop_convert \
asm(\
    /* Wrapper for noop_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noop_convert\n" \
    ".type __ia2_noop_convert, @function\n" \
    "__ia2_noop_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noop_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noop_convert, .-__ia2_noop_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noop_convert \
asm(\
    /* Wrapper for noop_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noop_convert\n" \
    ".type __ia2_noop_convert, @function\n" \
    "__ia2_noop_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noop_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noop_convert, .-__ia2_noop_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noop_quantize \
asm(\
    /* Wrapper for noop_quantize(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noop_quantize\n" \
    ".type __ia2_noop_quantize, @function\n" \
    "__ia2_noop_quantize:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noop_quantize\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noop_quantize, .-__ia2_noop_quantize\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noop_quantize \
asm(\
    /* Wrapper for noop_quantize(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noop_quantize\n" \
    ".type __ia2_noop_quantize, @function\n" \
    "__ia2_noop_quantize:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noop_quantize\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noop_quantize, .-__ia2_noop_quantize\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_empty_mem_output_buffer \
asm(\
    /* Wrapper for empty_mem_output_buffer(int) -> int: */ \
    ".text\n" \
    ".local __ia2_empty_mem_output_buffer\n" \
    ".type __ia2_empty_mem_output_buffer, @function\n" \
    "__ia2_empty_mem_output_buffer:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call empty_mem_output_buffer\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_empty_mem_output_buffer, .-__ia2_empty_mem_output_buffer\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_empty_output_buffer \
asm(\
    /* Wrapper for empty_output_buffer(int) -> int: */ \
    ".text\n" \
    ".local __ia2_empty_output_buffer\n" \
    ".type __ia2_empty_output_buffer, @function\n" \
    "__ia2_empty_output_buffer:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call empty_output_buffer\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_empty_output_buffer, .-__ia2_empty_output_buffer\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_init_destination \
asm(\
    /* Wrapper for init_destination(int): */ \
    ".text\n" \
    ".local __ia2_init_destination\n" \
    ".type __ia2_init_destination, @function\n" \
    "__ia2_init_destination:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call init_destination\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_init_destination, .-__ia2_init_destination\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_init_mem_destination \
asm(\
    /* Wrapper for init_mem_destination(int): */ \
    ".text\n" \
    ".local __ia2_init_mem_destination\n" \
    ".type __ia2_init_mem_destination, @function\n" \
    "__ia2_init_mem_destination:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call init_mem_destination\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_init_mem_destination, .-__ia2_init_mem_destination\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_term_destination \
asm(\
    /* Wrapper for term_destination(int): */ \
    ".text\n" \
    ".local __ia2_term_destination\n" \
    ".type __ia2_term_destination, @function\n" \
    "__ia2_term_destination:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call term_destination\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_term_destination, .-__ia2_term_destination\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_term_mem_destination \
asm(\
    /* Wrapper for term_mem_destination(int): */ \
    ".text\n" \
    ".local __ia2_term_mem_destination\n" \
    ".type __ia2_term_mem_destination, @function\n" \
    "__ia2_term_mem_destination:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call term_mem_destination\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_term_mem_destination, .-__ia2_term_mem_destination\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fill_input_buffer \
asm(\
    /* Wrapper for fill_input_buffer(int) -> int: */ \
    ".text\n" \
    ".local __ia2_fill_input_buffer\n" \
    ".type __ia2_fill_input_buffer, @function\n" \
    "__ia2_fill_input_buffer:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fill_input_buffer\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fill_input_buffer, .-__ia2_fill_input_buffer\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fill_mem_input_buffer \
asm(\
    /* Wrapper for fill_mem_input_buffer(int) -> int: */ \
    ".text\n" \
    ".local __ia2_fill_mem_input_buffer\n" \
    ".type __ia2_fill_mem_input_buffer, @function\n" \
    "__ia2_fill_mem_input_buffer:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fill_mem_input_buffer\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fill_mem_input_buffer, .-__ia2_fill_mem_input_buffer\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_init_mem_source \
asm(\
    /* Wrapper for init_mem_source(int): */ \
    ".text\n" \
    ".local __ia2_init_mem_source\n" \
    ".type __ia2_init_mem_source, @function\n" \
    "__ia2_init_mem_source:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call init_mem_source\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_init_mem_source, .-__ia2_init_mem_source\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_init_source \
asm(\
    /* Wrapper for init_source(int): */ \
    ".text\n" \
    ".local __ia2_init_source\n" \
    ".type __ia2_init_source, @function\n" \
    "__ia2_init_source:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call init_source\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_init_source, .-__ia2_init_source\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_skip_input_data \
asm(\
    /* Wrapper for skip_input_data(int, int): */ \
    ".text\n" \
    ".local __ia2_skip_input_data\n" \
    ".type __ia2_skip_input_data, @function\n" \
    "__ia2_skip_input_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call skip_input_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_skip_input_data, .-__ia2_skip_input_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_term_source \
asm(\
    /* Wrapper for term_source(int): */ \
    ".text\n" \
    ".local __ia2_term_source\n" \
    ".type __ia2_term_source, @function\n" \
    "__ia2_term_source:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call term_source\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_term_source, .-__ia2_term_source\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_consume_data \
asm(\
    /* Wrapper for consume_data(int) -> int: */ \
    ".text\n" \
    ".local __ia2_consume_data\n" \
    ".type __ia2_consume_data, @function\n" \
    "__ia2_consume_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call consume_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_consume_data, .-__ia2_consume_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decompress_data \
asm(\
    /* Wrapper for decompress_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decompress_data\n" \
    ".type __ia2_decompress_data, @function\n" \
    "__ia2_decompress_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decompress_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decompress_data, .-__ia2_decompress_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decompress_data \
asm(\
    /* Wrapper for decompress_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decompress_data\n" \
    ".type __ia2_decompress_data, @function\n" \
    "__ia2_decompress_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decompress_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decompress_data, .-__ia2_decompress_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decompress_onepass \
asm(\
    /* Wrapper for decompress_onepass(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decompress_onepass\n" \
    ".type __ia2_decompress_onepass, @function\n" \
    "__ia2_decompress_onepass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decompress_onepass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decompress_onepass, .-__ia2_decompress_onepass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decompress_onepass \
asm(\
    /* Wrapper for decompress_onepass(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decompress_onepass\n" \
    ".type __ia2_decompress_onepass, @function\n" \
    "__ia2_decompress_onepass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decompress_onepass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decompress_onepass, .-__ia2_decompress_onepass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decompress_smooth_data \
asm(\
    /* Wrapper for decompress_smooth_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decompress_smooth_data\n" \
    ".type __ia2_decompress_smooth_data, @function\n" \
    "__ia2_decompress_smooth_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decompress_smooth_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decompress_smooth_data, .-__ia2_decompress_smooth_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decompress_smooth_data \
asm(\
    /* Wrapper for decompress_smooth_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decompress_smooth_data\n" \
    ".type __ia2_decompress_smooth_data, @function\n" \
    "__ia2_decompress_smooth_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decompress_smooth_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decompress_smooth_data, .-__ia2_decompress_smooth_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_dummy_consume_data \
asm(\
    /* Wrapper for dummy_consume_data(int) -> int: */ \
    ".text\n" \
    ".local __ia2_dummy_consume_data\n" \
    ".type __ia2_dummy_consume_data, @function\n" \
    "__ia2_dummy_consume_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call dummy_consume_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_dummy_consume_data, .-__ia2_dummy_consume_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_input_pass \
asm(\
    /* Wrapper for start_input_pass(int): */ \
    ".text\n" \
    ".local __ia2_start_input_pass\n" \
    ".type __ia2_start_input_pass, @function\n" \
    "__ia2_start_input_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_input_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_input_pass, .-__ia2_start_input_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_output_pass \
asm(\
    /* Wrapper for start_output_pass(int): */ \
    ".text\n" \
    ".local __ia2_start_output_pass\n" \
    ".type __ia2_start_output_pass, @function\n" \
    "__ia2_start_output_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_output_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_output_pass, .-__ia2_start_output_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_gray_rgb565D_convert \
asm(\
    /* Wrapper for gray_rgb565D_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_gray_rgb565D_convert\n" \
    ".type __ia2_gray_rgb565D_convert, @function\n" \
    "__ia2_gray_rgb565D_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call gray_rgb565D_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_gray_rgb565D_convert, .-__ia2_gray_rgb565D_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_gray_rgb565D_convert \
asm(\
    /* Wrapper for gray_rgb565D_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_gray_rgb565D_convert\n" \
    ".type __ia2_gray_rgb565D_convert, @function\n" \
    "__ia2_gray_rgb565D_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call gray_rgb565D_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_gray_rgb565D_convert, .-__ia2_gray_rgb565D_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_gray_rgb565D_convert \
asm(\
    /* Wrapper for gray_rgb565D_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_gray_rgb565D_convert\n" \
    ".type __ia2_gray_rgb565D_convert, @function\n" \
    "__ia2_gray_rgb565D_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call gray_rgb565D_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_gray_rgb565D_convert, .-__ia2_gray_rgb565D_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_gray_rgb565_convert \
asm(\
    /* Wrapper for gray_rgb565_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_gray_rgb565_convert\n" \
    ".type __ia2_gray_rgb565_convert, @function\n" \
    "__ia2_gray_rgb565_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call gray_rgb565_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_gray_rgb565_convert, .-__ia2_gray_rgb565_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_gray_rgb565_convert \
asm(\
    /* Wrapper for gray_rgb565_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_gray_rgb565_convert\n" \
    ".type __ia2_gray_rgb565_convert, @function\n" \
    "__ia2_gray_rgb565_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call gray_rgb565_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_gray_rgb565_convert, .-__ia2_gray_rgb565_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_gray_rgb565_convert \
asm(\
    /* Wrapper for gray_rgb565_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_gray_rgb565_convert\n" \
    ".type __ia2_gray_rgb565_convert, @function\n" \
    "__ia2_gray_rgb565_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call gray_rgb565_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_gray_rgb565_convert, .-__ia2_gray_rgb565_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_gray_rgb_convert \
asm(\
    /* Wrapper for gray_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_gray_rgb_convert\n" \
    ".type __ia2_gray_rgb_convert, @function\n" \
    "__ia2_gray_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call gray_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_gray_rgb_convert, .-__ia2_gray_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_gray_rgb_convert \
asm(\
    /* Wrapper for gray_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_gray_rgb_convert\n" \
    ".type __ia2_gray_rgb_convert, @function\n" \
    "__ia2_gray_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call gray_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_gray_rgb_convert, .-__ia2_gray_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_gray_rgb_convert \
asm(\
    /* Wrapper for gray_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_gray_rgb_convert\n" \
    ".type __ia2_gray_rgb_convert, @function\n" \
    "__ia2_gray_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call gray_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_gray_rgb_convert, .-__ia2_gray_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_grayscale_convert \
asm(\
    /* Wrapper for grayscale_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_grayscale_convert\n" \
    ".type __ia2_grayscale_convert, @function\n" \
    "__ia2_grayscale_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call grayscale_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_grayscale_convert, .-__ia2_grayscale_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_grayscale_convert \
asm(\
    /* Wrapper for grayscale_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_grayscale_convert\n" \
    ".type __ia2_grayscale_convert, @function\n" \
    "__ia2_grayscale_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call grayscale_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_grayscale_convert, .-__ia2_grayscale_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_grayscale_convert \
asm(\
    /* Wrapper for grayscale_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_grayscale_convert\n" \
    ".type __ia2_grayscale_convert, @function\n" \
    "__ia2_grayscale_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call grayscale_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_grayscale_convert, .-__ia2_grayscale_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_null_convert \
asm(\
    /* Wrapper for null_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_null_convert\n" \
    ".type __ia2_null_convert, @function\n" \
    "__ia2_null_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call null_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_null_convert, .-__ia2_null_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_null_convert \
asm(\
    /* Wrapper for null_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_null_convert\n" \
    ".type __ia2_null_convert, @function\n" \
    "__ia2_null_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call null_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_null_convert, .-__ia2_null_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_null_convert \
asm(\
    /* Wrapper for null_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_null_convert\n" \
    ".type __ia2_null_convert, @function\n" \
    "__ia2_null_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call null_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_null_convert, .-__ia2_null_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_gray_convert \
asm(\
    /* Wrapper for rgb_gray_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_gray_convert\n" \
    ".type __ia2_rgb_gray_convert, @function\n" \
    "__ia2_rgb_gray_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_gray_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_gray_convert, .-__ia2_rgb_gray_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_gray_convert \
asm(\
    /* Wrapper for rgb_gray_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_gray_convert\n" \
    ".type __ia2_rgb_gray_convert, @function\n" \
    "__ia2_rgb_gray_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_gray_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_gray_convert, .-__ia2_rgb_gray_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_gray_convert \
asm(\
    /* Wrapper for rgb_gray_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_gray_convert\n" \
    ".type __ia2_rgb_gray_convert, @function\n" \
    "__ia2_rgb_gray_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_gray_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_gray_convert, .-__ia2_rgb_gray_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb565D_convert \
asm(\
    /* Wrapper for rgb_rgb565D_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb565D_convert\n" \
    ".type __ia2_rgb_rgb565D_convert, @function\n" \
    "__ia2_rgb_rgb565D_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb565D_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb565D_convert, .-__ia2_rgb_rgb565D_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb565D_convert \
asm(\
    /* Wrapper for rgb_rgb565D_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb565D_convert\n" \
    ".type __ia2_rgb_rgb565D_convert, @function\n" \
    "__ia2_rgb_rgb565D_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb565D_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb565D_convert, .-__ia2_rgb_rgb565D_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb565D_convert \
asm(\
    /* Wrapper for rgb_rgb565D_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb565D_convert\n" \
    ".type __ia2_rgb_rgb565D_convert, @function\n" \
    "__ia2_rgb_rgb565D_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb565D_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb565D_convert, .-__ia2_rgb_rgb565D_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb565_convert \
asm(\
    /* Wrapper for rgb_rgb565_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb565_convert\n" \
    ".type __ia2_rgb_rgb565_convert, @function\n" \
    "__ia2_rgb_rgb565_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb565_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb565_convert, .-__ia2_rgb_rgb565_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb565_convert \
asm(\
    /* Wrapper for rgb_rgb565_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb565_convert\n" \
    ".type __ia2_rgb_rgb565_convert, @function\n" \
    "__ia2_rgb_rgb565_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb565_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb565_convert, .-__ia2_rgb_rgb565_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb565_convert \
asm(\
    /* Wrapper for rgb_rgb565_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb565_convert\n" \
    ".type __ia2_rgb_rgb565_convert, @function\n" \
    "__ia2_rgb_rgb565_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb565_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb565_convert, .-__ia2_rgb_rgb565_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb_convert \
asm(\
    /* Wrapper for rgb_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb_convert\n" \
    ".type __ia2_rgb_rgb_convert, @function\n" \
    "__ia2_rgb_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb_convert, .-__ia2_rgb_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb_convert \
asm(\
    /* Wrapper for rgb_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb_convert\n" \
    ".type __ia2_rgb_rgb_convert, @function\n" \
    "__ia2_rgb_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb_convert, .-__ia2_rgb_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_rgb_rgb_convert \
asm(\
    /* Wrapper for rgb_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_rgb_rgb_convert\n" \
    ".type __ia2_rgb_rgb_convert, @function\n" \
    "__ia2_rgb_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call rgb_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_rgb_rgb_convert, .-__ia2_rgb_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_dcolor \
asm(\
    /* Wrapper for start_pass_dcolor(int): */ \
    ".text\n" \
    ".local __ia2_start_pass_dcolor\n" \
    ".type __ia2_start_pass_dcolor, @function\n" \
    "__ia2_start_pass_dcolor:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_dcolor\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_dcolor, .-__ia2_start_pass_dcolor\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycc_rgb565D_convert \
asm(\
    /* Wrapper for ycc_rgb565D_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycc_rgb565D_convert\n" \
    ".type __ia2_ycc_rgb565D_convert, @function\n" \
    "__ia2_ycc_rgb565D_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycc_rgb565D_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycc_rgb565D_convert, .-__ia2_ycc_rgb565D_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycc_rgb565D_convert \
asm(\
    /* Wrapper for ycc_rgb565D_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycc_rgb565D_convert\n" \
    ".type __ia2_ycc_rgb565D_convert, @function\n" \
    "__ia2_ycc_rgb565D_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycc_rgb565D_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycc_rgb565D_convert, .-__ia2_ycc_rgb565D_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycc_rgb565D_convert \
asm(\
    /* Wrapper for ycc_rgb565D_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycc_rgb565D_convert\n" \
    ".type __ia2_ycc_rgb565D_convert, @function\n" \
    "__ia2_ycc_rgb565D_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycc_rgb565D_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycc_rgb565D_convert, .-__ia2_ycc_rgb565D_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycc_rgb565_convert \
asm(\
    /* Wrapper for ycc_rgb565_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycc_rgb565_convert\n" \
    ".type __ia2_ycc_rgb565_convert, @function\n" \
    "__ia2_ycc_rgb565_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycc_rgb565_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycc_rgb565_convert, .-__ia2_ycc_rgb565_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycc_rgb565_convert \
asm(\
    /* Wrapper for ycc_rgb565_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycc_rgb565_convert\n" \
    ".type __ia2_ycc_rgb565_convert, @function\n" \
    "__ia2_ycc_rgb565_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycc_rgb565_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycc_rgb565_convert, .-__ia2_ycc_rgb565_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycc_rgb565_convert \
asm(\
    /* Wrapper for ycc_rgb565_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycc_rgb565_convert\n" \
    ".type __ia2_ycc_rgb565_convert, @function\n" \
    "__ia2_ycc_rgb565_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycc_rgb565_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycc_rgb565_convert, .-__ia2_ycc_rgb565_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycc_rgb_convert \
asm(\
    /* Wrapper for ycc_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycc_rgb_convert\n" \
    ".type __ia2_ycc_rgb_convert, @function\n" \
    "__ia2_ycc_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycc_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycc_rgb_convert, .-__ia2_ycc_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycc_rgb_convert \
asm(\
    /* Wrapper for ycc_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycc_rgb_convert\n" \
    ".type __ia2_ycc_rgb_convert, @function\n" \
    "__ia2_ycc_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycc_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycc_rgb_convert, .-__ia2_ycc_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycc_rgb_convert \
asm(\
    /* Wrapper for ycc_rgb_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycc_rgb_convert\n" \
    ".type __ia2_ycc_rgb_convert, @function\n" \
    "__ia2_ycc_rgb_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycc_rgb_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycc_rgb_convert, .-__ia2_ycc_rgb_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycck_cmyk_convert \
asm(\
    /* Wrapper for ycck_cmyk_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycck_cmyk_convert\n" \
    ".type __ia2_ycck_cmyk_convert, @function\n" \
    "__ia2_ycck_cmyk_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycck_cmyk_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycck_cmyk_convert, .-__ia2_ycck_cmyk_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycck_cmyk_convert \
asm(\
    /* Wrapper for ycck_cmyk_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycck_cmyk_convert\n" \
    ".type __ia2_ycck_cmyk_convert, @function\n" \
    "__ia2_ycck_cmyk_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycck_cmyk_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycck_cmyk_convert, .-__ia2_ycck_cmyk_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_ycck_cmyk_convert \
asm(\
    /* Wrapper for ycck_cmyk_convert(int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_ycck_cmyk_convert\n" \
    ".type __ia2_ycck_cmyk_convert, @function\n" \
    "__ia2_ycck_cmyk_convert:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call ycck_cmyk_convert\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_ycck_cmyk_convert, .-__ia2_ycck_cmyk_convert\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass \
asm(\
    /* Wrapper for start_pass(int): */ \
    ".text\n" \
    ".local __ia2_start_pass\n" \
    ".type __ia2_start_pass, @function\n" \
    "__ia2_start_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass, .-__ia2_start_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_consume_data \
asm(\
    /* Wrapper for consume_data(int) -> int: */ \
    ".text\n" \
    ".local __ia2_consume_data\n" \
    ".type __ia2_consume_data, @function\n" \
    "__ia2_consume_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call consume_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_consume_data, .-__ia2_consume_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decompress_data \
asm(\
    /* Wrapper for decompress_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decompress_data\n" \
    ".type __ia2_decompress_data, @function\n" \
    "__ia2_decompress_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decompress_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decompress_data, .-__ia2_decompress_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decompress_data \
asm(\
    /* Wrapper for decompress_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decompress_data\n" \
    ".type __ia2_decompress_data, @function\n" \
    "__ia2_decompress_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decompress_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decompress_data, .-__ia2_decompress_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decompress_data \
asm(\
    /* Wrapper for decompress_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decompress_data\n" \
    ".type __ia2_decompress_data, @function\n" \
    "__ia2_decompress_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decompress_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decompress_data, .-__ia2_decompress_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_dummy_consume_data \
asm(\
    /* Wrapper for dummy_consume_data(int) -> int: */ \
    ".text\n" \
    ".local __ia2_dummy_consume_data\n" \
    ".type __ia2_dummy_consume_data, @function\n" \
    "__ia2_dummy_consume_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call dummy_consume_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_dummy_consume_data, .-__ia2_dummy_consume_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_output_data \
asm(\
    /* Wrapper for output_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_output_data\n" \
    ".type __ia2_output_data, @function\n" \
    "__ia2_output_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call output_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_output_data, .-__ia2_output_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_output_data \
asm(\
    /* Wrapper for output_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_output_data\n" \
    ".type __ia2_output_data, @function\n" \
    "__ia2_output_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call output_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_output_data, .-__ia2_output_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_output_data \
asm(\
    /* Wrapper for output_data(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_output_data\n" \
    ".type __ia2_output_data, @function\n" \
    "__ia2_output_data:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call output_data\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_output_data, .-__ia2_output_data\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_input_pass \
asm(\
    /* Wrapper for start_input_pass(int): */ \
    ".text\n" \
    ".local __ia2_start_input_pass\n" \
    ".type __ia2_start_input_pass, @function\n" \
    "__ia2_start_input_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_input_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_input_pass, .-__ia2_start_input_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_output_pass \
asm(\
    /* Wrapper for start_output_pass(int): */ \
    ".text\n" \
    ".local __ia2_start_output_pass\n" \
    ".type __ia2_start_output_pass, @function\n" \
    "__ia2_start_output_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_output_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_output_pass, .-__ia2_start_output_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decode_mcu \
asm(\
    /* Wrapper for decode_mcu(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decode_mcu\n" \
    ".type __ia2_decode_mcu, @function\n" \
    "__ia2_decode_mcu:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decode_mcu\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decode_mcu, .-__ia2_decode_mcu\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_huff_decoder \
asm(\
    /* Wrapper for start_pass_huff_decoder(int): */ \
    ".text\n" \
    ".local __ia2_start_pass_huff_decoder\n" \
    ".type __ia2_start_pass_huff_decoder, @function\n" \
    "__ia2_start_pass_huff_decoder:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_huff_decoder\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_huff_decoder, .-__ia2_start_pass_huff_decoder\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_consume_markers \
asm(\
    /* Wrapper for consume_markers(int) -> int: */ \
    ".text\n" \
    ".local __ia2_consume_markers\n" \
    ".type __ia2_consume_markers, @function\n" \
    "__ia2_consume_markers:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call consume_markers\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_consume_markers, .-__ia2_consume_markers\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_input_pass \
asm(\
    /* Wrapper for finish_input_pass(int): */ \
    ".text\n" \
    ".local __ia2_finish_input_pass\n" \
    ".type __ia2_finish_input_pass, @function\n" \
    "__ia2_finish_input_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_input_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_input_pass, .-__ia2_finish_input_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_reset_input_controller \
asm(\
    /* Wrapper for reset_input_controller(int): */ \
    ".text\n" \
    ".local __ia2_reset_input_controller\n" \
    ".type __ia2_reset_input_controller, @function\n" \
    "__ia2_reset_input_controller:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call reset_input_controller\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_reset_input_controller, .-__ia2_reset_input_controller\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_input_pass \
asm(\
    /* Wrapper for start_input_pass(int): */ \
    ".text\n" \
    ".local __ia2_start_input_pass\n" \
    ".type __ia2_start_input_pass, @function\n" \
    "__ia2_start_input_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_input_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_input_pass, .-__ia2_start_input_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decode_mcus \
asm(\
    /* Wrapper for decode_mcus(int, int, int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decode_mcus\n" \
    ".type __ia2_decode_mcus, @function\n" \
    "__ia2_decode_mcus:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decode_mcus\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decode_mcus, .-__ia2_decode_mcus\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_restart \
asm(\
    /* Wrapper for process_restart(int) -> int: */ \
    ".text\n" \
    ".local __ia2_process_restart\n" \
    ".type __ia2_process_restart, @function\n" \
    "__ia2_process_restart:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_restart\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_restart, .-__ia2_process_restart\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_lhuff_decoder \
asm(\
    /* Wrapper for start_pass_lhuff_decoder(int): */ \
    ".text\n" \
    ".local __ia2_start_pass_lhuff_decoder\n" \
    ".type __ia2_start_pass_lhuff_decoder, @function\n" \
    "__ia2_start_pass_lhuff_decoder:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_lhuff_decoder\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_lhuff_decoder, .-__ia2_start_pass_lhuff_decoder\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_undifference1 \
asm(\
    /* Wrapper for jpeg_undifference1(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_undifference1\n" \
    ".type __ia2_jpeg_undifference1, @function\n" \
    "__ia2_jpeg_undifference1:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_undifference1\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_undifference1, .-__ia2_jpeg_undifference1\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_undifference2 \
asm(\
    /* Wrapper for jpeg_undifference2(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_undifference2\n" \
    ".type __ia2_jpeg_undifference2, @function\n" \
    "__ia2_jpeg_undifference2:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_undifference2\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_undifference2, .-__ia2_jpeg_undifference2\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_undifference3 \
asm(\
    /* Wrapper for jpeg_undifference3(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_undifference3\n" \
    ".type __ia2_jpeg_undifference3, @function\n" \
    "__ia2_jpeg_undifference3:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_undifference3\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_undifference3, .-__ia2_jpeg_undifference3\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_undifference4 \
asm(\
    /* Wrapper for jpeg_undifference4(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_undifference4\n" \
    ".type __ia2_jpeg_undifference4, @function\n" \
    "__ia2_jpeg_undifference4:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_undifference4\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_undifference4, .-__ia2_jpeg_undifference4\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_undifference5 \
asm(\
    /* Wrapper for jpeg_undifference5(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_undifference5\n" \
    ".type __ia2_jpeg_undifference5, @function\n" \
    "__ia2_jpeg_undifference5:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_undifference5\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_undifference5, .-__ia2_jpeg_undifference5\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_undifference6 \
asm(\
    /* Wrapper for jpeg_undifference6(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_undifference6\n" \
    ".type __ia2_jpeg_undifference6, @function\n" \
    "__ia2_jpeg_undifference6:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_undifference6\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_undifference6, .-__ia2_jpeg_undifference6\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_undifference7 \
asm(\
    /* Wrapper for jpeg_undifference7(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_undifference7\n" \
    ".type __ia2_jpeg_undifference7, @function\n" \
    "__ia2_jpeg_undifference7:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_undifference7\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_undifference7, .-__ia2_jpeg_undifference7\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_jpeg_undifference_first_row \
asm(\
    /* Wrapper for jpeg_undifference_first_row(int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_jpeg_undifference_first_row\n" \
    ".type __ia2_jpeg_undifference_first_row, @function\n" \
    "__ia2_jpeg_undifference_first_row:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call jpeg_undifference_first_row\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_jpeg_undifference_first_row, .-__ia2_jpeg_undifference_first_row\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noscale \
asm(\
    /* Wrapper for noscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noscale\n" \
    ".type __ia2_noscale, @function\n" \
    "__ia2_noscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noscale, .-__ia2_noscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noscale \
asm(\
    /* Wrapper for noscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noscale\n" \
    ".type __ia2_noscale, @function\n" \
    "__ia2_noscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noscale, .-__ia2_noscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noscale \
asm(\
    /* Wrapper for noscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noscale\n" \
    ".type __ia2_noscale, @function\n" \
    "__ia2_noscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noscale, .-__ia2_noscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_simple_upscale \
asm(\
    /* Wrapper for simple_upscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_simple_upscale\n" \
    ".type __ia2_simple_upscale, @function\n" \
    "__ia2_simple_upscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call simple_upscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_simple_upscale, .-__ia2_simple_upscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_simple_upscale \
asm(\
    /* Wrapper for simple_upscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_simple_upscale\n" \
    ".type __ia2_simple_upscale, @function\n" \
    "__ia2_simple_upscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call simple_upscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_simple_upscale, .-__ia2_simple_upscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_simple_upscale \
asm(\
    /* Wrapper for simple_upscale(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_simple_upscale\n" \
    ".type __ia2_simple_upscale, @function\n" \
    "__ia2_simple_upscale:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call simple_upscale\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_simple_upscale, .-__ia2_simple_upscale\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_lossless \
asm(\
    /* Wrapper for start_pass_lossless(int): */ \
    ".text\n" \
    ".local __ia2_start_pass_lossless\n" \
    ".type __ia2_start_pass_lossless, @function\n" \
    "__ia2_start_pass_lossless:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_lossless\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_lossless, .-__ia2_start_pass_lossless\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_context_main \
asm(\
    /* Wrapper for process_data_context_main(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_context_main\n" \
    ".type __ia2_process_data_context_main, @function\n" \
    "__ia2_process_data_context_main:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_context_main\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_context_main, .-__ia2_process_data_context_main\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_context_main \
asm(\
    /* Wrapper for process_data_context_main(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_context_main\n" \
    ".type __ia2_process_data_context_main, @function\n" \
    "__ia2_process_data_context_main:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_context_main\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_context_main, .-__ia2_process_data_context_main\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_context_main \
asm(\
    /* Wrapper for process_data_context_main(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_context_main\n" \
    ".type __ia2_process_data_context_main, @function\n" \
    "__ia2_process_data_context_main:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_context_main\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_context_main, .-__ia2_process_data_context_main\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_crank_post \
asm(\
    /* Wrapper for process_data_crank_post(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_crank_post\n" \
    ".type __ia2_process_data_crank_post, @function\n" \
    "__ia2_process_data_crank_post:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_crank_post\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_crank_post, .-__ia2_process_data_crank_post\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_crank_post \
asm(\
    /* Wrapper for process_data_crank_post(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_crank_post\n" \
    ".type __ia2_process_data_crank_post, @function\n" \
    "__ia2_process_data_crank_post:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_crank_post\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_crank_post, .-__ia2_process_data_crank_post\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_crank_post \
asm(\
    /* Wrapper for process_data_crank_post(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_crank_post\n" \
    ".type __ia2_process_data_crank_post, @function\n" \
    "__ia2_process_data_crank_post:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_crank_post\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_crank_post, .-__ia2_process_data_crank_post\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_simple_main \
asm(\
    /* Wrapper for process_data_simple_main(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_simple_main\n" \
    ".type __ia2_process_data_simple_main, @function\n" \
    "__ia2_process_data_simple_main:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_simple_main\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_simple_main, .-__ia2_process_data_simple_main\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_simple_main \
asm(\
    /* Wrapper for process_data_simple_main(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_simple_main\n" \
    ".type __ia2_process_data_simple_main, @function\n" \
    "__ia2_process_data_simple_main:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_simple_main\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_simple_main, .-__ia2_process_data_simple_main\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_process_data_simple_main \
asm(\
    /* Wrapper for process_data_simple_main(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_process_data_simple_main\n" \
    ".type __ia2_process_data_simple_main, @function\n" \
    "__ia2_process_data_simple_main:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call process_data_simple_main\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_process_data_simple_main, .-__ia2_process_data_simple_main\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_main \
asm(\
    /* Wrapper for start_pass_main(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_main\n" \
    ".type __ia2_start_pass_main, @function\n" \
    "__ia2_start_pass_main:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_main\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_main, .-__ia2_start_pass_main\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_get_interesting_appn \
asm(\
    /* Wrapper for get_interesting_appn(int) -> int: */ \
    ".text\n" \
    ".local __ia2_get_interesting_appn\n" \
    ".type __ia2_get_interesting_appn, @function\n" \
    "__ia2_get_interesting_appn:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call get_interesting_appn\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_get_interesting_appn, .-__ia2_get_interesting_appn\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_read_markers \
asm(\
    /* Wrapper for read_markers(int) -> int: */ \
    ".text\n" \
    ".local __ia2_read_markers\n" \
    ".type __ia2_read_markers, @function\n" \
    "__ia2_read_markers:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call read_markers\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_read_markers, .-__ia2_read_markers\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_read_restart_marker \
asm(\
    /* Wrapper for read_restart_marker(int) -> int: */ \
    ".text\n" \
    ".local __ia2_read_restart_marker\n" \
    ".type __ia2_read_restart_marker, @function\n" \
    "__ia2_read_restart_marker:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call read_restart_marker\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_read_restart_marker, .-__ia2_read_restart_marker\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_reset_marker_reader \
asm(\
    /* Wrapper for reset_marker_reader(int): */ \
    ".text\n" \
    ".local __ia2_reset_marker_reader\n" \
    ".type __ia2_reset_marker_reader, @function\n" \
    "__ia2_reset_marker_reader:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call reset_marker_reader\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_reset_marker_reader, .-__ia2_reset_marker_reader\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_save_marker \
asm(\
    /* Wrapper for save_marker(int) -> int: */ \
    ".text\n" \
    ".local __ia2_save_marker\n" \
    ".type __ia2_save_marker, @function\n" \
    "__ia2_save_marker:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call save_marker\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_save_marker, .-__ia2_save_marker\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_skip_variable \
asm(\
    /* Wrapper for skip_variable(int) -> int: */ \
    ".text\n" \
    ".local __ia2_skip_variable\n" \
    ".type __ia2_skip_variable, @function\n" \
    "__ia2_skip_variable:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call skip_variable\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_skip_variable, .-__ia2_skip_variable\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_output_pass \
asm(\
    /* Wrapper for finish_output_pass(int): */ \
    ".text\n" \
    ".local __ia2_finish_output_pass\n" \
    ".type __ia2_finish_output_pass, @function\n" \
    "__ia2_finish_output_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_output_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_output_pass, .-__ia2_finish_output_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_prepare_for_output_pass \
asm(\
    /* Wrapper for prepare_for_output_pass(int): */ \
    ".text\n" \
    ".local __ia2_prepare_for_output_pass\n" \
    ".type __ia2_prepare_for_output_pass, @function\n" \
    "__ia2_prepare_for_output_pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call prepare_for_output_pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_prepare_for_output_pass, .-__ia2_prepare_for_output_pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_merged_upsample \
asm(\
    /* Wrapper for h2v1_merged_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_merged_upsample\n" \
    ".type __ia2_h2v1_merged_upsample, @function\n" \
    "__ia2_h2v1_merged_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_merged_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_merged_upsample, .-__ia2_h2v1_merged_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_merged_upsample \
asm(\
    /* Wrapper for h2v1_merged_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_merged_upsample\n" \
    ".type __ia2_h2v1_merged_upsample, @function\n" \
    "__ia2_h2v1_merged_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_merged_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_merged_upsample, .-__ia2_h2v1_merged_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_merged_upsample_565 \
asm(\
    /* Wrapper for h2v1_merged_upsample_565(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_merged_upsample_565\n" \
    ".type __ia2_h2v1_merged_upsample_565, @function\n" \
    "__ia2_h2v1_merged_upsample_565:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_merged_upsample_565\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_merged_upsample_565, .-__ia2_h2v1_merged_upsample_565\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_merged_upsample_565 \
asm(\
    /* Wrapper for h2v1_merged_upsample_565(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_merged_upsample_565\n" \
    ".type __ia2_h2v1_merged_upsample_565, @function\n" \
    "__ia2_h2v1_merged_upsample_565:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_merged_upsample_565\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_merged_upsample_565, .-__ia2_h2v1_merged_upsample_565\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_merged_upsample_565D \
asm(\
    /* Wrapper for h2v1_merged_upsample_565D(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_merged_upsample_565D\n" \
    ".type __ia2_h2v1_merged_upsample_565D, @function\n" \
    "__ia2_h2v1_merged_upsample_565D:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_merged_upsample_565D\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_merged_upsample_565D, .-__ia2_h2v1_merged_upsample_565D\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_merged_upsample_565D \
asm(\
    /* Wrapper for h2v1_merged_upsample_565D(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_merged_upsample_565D\n" \
    ".type __ia2_h2v1_merged_upsample_565D, @function\n" \
    "__ia2_h2v1_merged_upsample_565D:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_merged_upsample_565D\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_merged_upsample_565D, .-__ia2_h2v1_merged_upsample_565D\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_merged_upsample \
asm(\
    /* Wrapper for h2v2_merged_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_merged_upsample\n" \
    ".type __ia2_h2v2_merged_upsample, @function\n" \
    "__ia2_h2v2_merged_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_merged_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_merged_upsample, .-__ia2_h2v2_merged_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_merged_upsample \
asm(\
    /* Wrapper for h2v2_merged_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_merged_upsample\n" \
    ".type __ia2_h2v2_merged_upsample, @function\n" \
    "__ia2_h2v2_merged_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_merged_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_merged_upsample, .-__ia2_h2v2_merged_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_merged_upsample_565 \
asm(\
    /* Wrapper for h2v2_merged_upsample_565(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_merged_upsample_565\n" \
    ".type __ia2_h2v2_merged_upsample_565, @function\n" \
    "__ia2_h2v2_merged_upsample_565:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_merged_upsample_565\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_merged_upsample_565, .-__ia2_h2v2_merged_upsample_565\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_merged_upsample_565 \
asm(\
    /* Wrapper for h2v2_merged_upsample_565(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_merged_upsample_565\n" \
    ".type __ia2_h2v2_merged_upsample_565, @function\n" \
    "__ia2_h2v2_merged_upsample_565:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_merged_upsample_565\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_merged_upsample_565, .-__ia2_h2v2_merged_upsample_565\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_merged_upsample_565D \
asm(\
    /* Wrapper for h2v2_merged_upsample_565D(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_merged_upsample_565D\n" \
    ".type __ia2_h2v2_merged_upsample_565D, @function\n" \
    "__ia2_h2v2_merged_upsample_565D:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_merged_upsample_565D\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_merged_upsample_565D, .-__ia2_h2v2_merged_upsample_565D\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_merged_upsample_565D \
asm(\
    /* Wrapper for h2v2_merged_upsample_565D(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_merged_upsample_565D\n" \
    ".type __ia2_h2v2_merged_upsample_565D, @function\n" \
    "__ia2_h2v2_merged_upsample_565D:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_merged_upsample_565D\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_merged_upsample_565D, .-__ia2_h2v2_merged_upsample_565D\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_merged_1v_upsample \
asm(\
    /* Wrapper for merged_1v_upsample(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_merged_1v_upsample\n" \
    ".type __ia2_merged_1v_upsample, @function\n" \
    "__ia2_merged_1v_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call merged_1v_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_merged_1v_upsample, .-__ia2_merged_1v_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_merged_1v_upsample \
asm(\
    /* Wrapper for merged_1v_upsample(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_merged_1v_upsample\n" \
    ".type __ia2_merged_1v_upsample, @function\n" \
    "__ia2_merged_1v_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call merged_1v_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_merged_1v_upsample, .-__ia2_merged_1v_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_merged_2v_upsample \
asm(\
    /* Wrapper for merged_2v_upsample(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_merged_2v_upsample\n" \
    ".type __ia2_merged_2v_upsample, @function\n" \
    "__ia2_merged_2v_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call merged_2v_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_merged_2v_upsample, .-__ia2_merged_2v_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_merged_2v_upsample \
asm(\
    /* Wrapper for merged_2v_upsample(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_merged_2v_upsample\n" \
    ".type __ia2_merged_2v_upsample, @function\n" \
    "__ia2_merged_2v_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call merged_2v_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_merged_2v_upsample, .-__ia2_merged_2v_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_merged_upsample \
asm(\
    /* Wrapper for start_pass_merged_upsample(int): */ \
    ".text\n" \
    ".local __ia2_start_pass_merged_upsample\n" \
    ".type __ia2_start_pass_merged_upsample, @function\n" \
    "__ia2_start_pass_merged_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_merged_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_merged_upsample, .-__ia2_start_pass_merged_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decode_mcu_AC_first \
asm(\
    /* Wrapper for decode_mcu_AC_first(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decode_mcu_AC_first\n" \
    ".type __ia2_decode_mcu_AC_first, @function\n" \
    "__ia2_decode_mcu_AC_first:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decode_mcu_AC_first\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decode_mcu_AC_first, .-__ia2_decode_mcu_AC_first\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decode_mcu_AC_refine \
asm(\
    /* Wrapper for decode_mcu_AC_refine(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decode_mcu_AC_refine\n" \
    ".type __ia2_decode_mcu_AC_refine, @function\n" \
    "__ia2_decode_mcu_AC_refine:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decode_mcu_AC_refine\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decode_mcu_AC_refine, .-__ia2_decode_mcu_AC_refine\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decode_mcu_DC_first \
asm(\
    /* Wrapper for decode_mcu_DC_first(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decode_mcu_DC_first\n" \
    ".type __ia2_decode_mcu_DC_first, @function\n" \
    "__ia2_decode_mcu_DC_first:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decode_mcu_DC_first\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decode_mcu_DC_first, .-__ia2_decode_mcu_DC_first\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_decode_mcu_DC_refine \
asm(\
    /* Wrapper for decode_mcu_DC_refine(int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_decode_mcu_DC_refine\n" \
    ".type __ia2_decode_mcu_DC_refine, @function\n" \
    "__ia2_decode_mcu_DC_refine:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call decode_mcu_DC_refine\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_decode_mcu_DC_refine, .-__ia2_decode_mcu_DC_refine\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_phuff_decoder \
asm(\
    /* Wrapper for start_pass_phuff_decoder(int): */ \
    ".text\n" \
    ".local __ia2_start_pass_phuff_decoder\n" \
    ".type __ia2_start_pass_phuff_decoder, @function\n" \
    "__ia2_start_pass_phuff_decoder:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_phuff_decoder\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_phuff_decoder, .-__ia2_start_pass_phuff_decoder\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_post_process_1pass \
asm(\
    /* Wrapper for post_process_1pass(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_post_process_1pass\n" \
    ".type __ia2_post_process_1pass, @function\n" \
    "__ia2_post_process_1pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call post_process_1pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_post_process_1pass, .-__ia2_post_process_1pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_post_process_1pass \
asm(\
    /* Wrapper for post_process_1pass(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_post_process_1pass\n" \
    ".type __ia2_post_process_1pass, @function\n" \
    "__ia2_post_process_1pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call post_process_1pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_post_process_1pass, .-__ia2_post_process_1pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_post_process_2pass \
asm(\
    /* Wrapper for post_process_2pass(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_post_process_2pass\n" \
    ".type __ia2_post_process_2pass, @function\n" \
    "__ia2_post_process_2pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call post_process_2pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_post_process_2pass, .-__ia2_post_process_2pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_post_process_2pass \
asm(\
    /* Wrapper for post_process_2pass(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_post_process_2pass\n" \
    ".type __ia2_post_process_2pass, @function\n" \
    "__ia2_post_process_2pass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call post_process_2pass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_post_process_2pass, .-__ia2_post_process_2pass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_post_process_prepass \
asm(\
    /* Wrapper for post_process_prepass(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_post_process_prepass\n" \
    ".type __ia2_post_process_prepass, @function\n" \
    "__ia2_post_process_prepass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call post_process_prepass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_post_process_prepass, .-__ia2_post_process_prepass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_post_process_prepass \
asm(\
    /* Wrapper for post_process_prepass(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_post_process_prepass\n" \
    ".type __ia2_post_process_prepass, @function\n" \
    "__ia2_post_process_prepass:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call post_process_prepass\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_post_process_prepass, .-__ia2_post_process_prepass\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_dpost \
asm(\
    /* Wrapper for start_pass_dpost(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_dpost\n" \
    ".type __ia2_start_pass_dpost, @function\n" \
    "__ia2_start_pass_dpost:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_dpost\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_dpost, .-__ia2_start_pass_dpost\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fullsize_upsample \
asm(\
    /* Wrapper for fullsize_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_fullsize_upsample\n" \
    ".type __ia2_fullsize_upsample, @function\n" \
    "__ia2_fullsize_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fullsize_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fullsize_upsample, .-__ia2_fullsize_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fullsize_upsample \
asm(\
    /* Wrapper for fullsize_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_fullsize_upsample\n" \
    ".type __ia2_fullsize_upsample, @function\n" \
    "__ia2_fullsize_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fullsize_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fullsize_upsample, .-__ia2_fullsize_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_fullsize_upsample \
asm(\
    /* Wrapper for fullsize_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_fullsize_upsample\n" \
    ".type __ia2_fullsize_upsample, @function\n" \
    "__ia2_fullsize_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call fullsize_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_fullsize_upsample, .-__ia2_fullsize_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h1v2_fancy_upsample \
asm(\
    /* Wrapper for h1v2_fancy_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h1v2_fancy_upsample\n" \
    ".type __ia2_h1v2_fancy_upsample, @function\n" \
    "__ia2_h1v2_fancy_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h1v2_fancy_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h1v2_fancy_upsample, .-__ia2_h1v2_fancy_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h1v2_fancy_upsample \
asm(\
    /* Wrapper for h1v2_fancy_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h1v2_fancy_upsample\n" \
    ".type __ia2_h1v2_fancy_upsample, @function\n" \
    "__ia2_h1v2_fancy_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h1v2_fancy_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h1v2_fancy_upsample, .-__ia2_h1v2_fancy_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h1v2_fancy_upsample \
asm(\
    /* Wrapper for h1v2_fancy_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h1v2_fancy_upsample\n" \
    ".type __ia2_h1v2_fancy_upsample, @function\n" \
    "__ia2_h1v2_fancy_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h1v2_fancy_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h1v2_fancy_upsample, .-__ia2_h1v2_fancy_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_fancy_upsample \
asm(\
    /* Wrapper for h2v1_fancy_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_fancy_upsample\n" \
    ".type __ia2_h2v1_fancy_upsample, @function\n" \
    "__ia2_h2v1_fancy_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_fancy_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_fancy_upsample, .-__ia2_h2v1_fancy_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_fancy_upsample \
asm(\
    /* Wrapper for h2v1_fancy_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_fancy_upsample\n" \
    ".type __ia2_h2v1_fancy_upsample, @function\n" \
    "__ia2_h2v1_fancy_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_fancy_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_fancy_upsample, .-__ia2_h2v1_fancy_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_fancy_upsample \
asm(\
    /* Wrapper for h2v1_fancy_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_fancy_upsample\n" \
    ".type __ia2_h2v1_fancy_upsample, @function\n" \
    "__ia2_h2v1_fancy_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_fancy_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_fancy_upsample, .-__ia2_h2v1_fancy_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_upsample \
asm(\
    /* Wrapper for h2v1_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_upsample\n" \
    ".type __ia2_h2v1_upsample, @function\n" \
    "__ia2_h2v1_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_upsample, .-__ia2_h2v1_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_upsample \
asm(\
    /* Wrapper for h2v1_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_upsample\n" \
    ".type __ia2_h2v1_upsample, @function\n" \
    "__ia2_h2v1_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_upsample, .-__ia2_h2v1_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v1_upsample \
asm(\
    /* Wrapper for h2v1_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v1_upsample\n" \
    ".type __ia2_h2v1_upsample, @function\n" \
    "__ia2_h2v1_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v1_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v1_upsample, .-__ia2_h2v1_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_fancy_upsample \
asm(\
    /* Wrapper for h2v2_fancy_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_fancy_upsample\n" \
    ".type __ia2_h2v2_fancy_upsample, @function\n" \
    "__ia2_h2v2_fancy_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_fancy_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_fancy_upsample, .-__ia2_h2v2_fancy_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_fancy_upsample \
asm(\
    /* Wrapper for h2v2_fancy_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_fancy_upsample\n" \
    ".type __ia2_h2v2_fancy_upsample, @function\n" \
    "__ia2_h2v2_fancy_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_fancy_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_fancy_upsample, .-__ia2_h2v2_fancy_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_fancy_upsample \
asm(\
    /* Wrapper for h2v2_fancy_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_fancy_upsample\n" \
    ".type __ia2_h2v2_fancy_upsample, @function\n" \
    "__ia2_h2v2_fancy_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_fancy_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_fancy_upsample, .-__ia2_h2v2_fancy_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_upsample \
asm(\
    /* Wrapper for h2v2_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_upsample\n" \
    ".type __ia2_h2v2_upsample, @function\n" \
    "__ia2_h2v2_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_upsample, .-__ia2_h2v2_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_upsample \
asm(\
    /* Wrapper for h2v2_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_upsample\n" \
    ".type __ia2_h2v2_upsample, @function\n" \
    "__ia2_h2v2_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_upsample, .-__ia2_h2v2_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_h2v2_upsample \
asm(\
    /* Wrapper for h2v2_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_h2v2_upsample\n" \
    ".type __ia2_h2v2_upsample, @function\n" \
    "__ia2_h2v2_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call h2v2_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_h2v2_upsample, .-__ia2_h2v2_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_int_upsample \
asm(\
    /* Wrapper for int_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_int_upsample\n" \
    ".type __ia2_int_upsample, @function\n" \
    "__ia2_int_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call int_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_int_upsample, .-__ia2_int_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_int_upsample \
asm(\
    /* Wrapper for int_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_int_upsample\n" \
    ".type __ia2_int_upsample, @function\n" \
    "__ia2_int_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call int_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_int_upsample, .-__ia2_int_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_int_upsample \
asm(\
    /* Wrapper for int_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_int_upsample\n" \
    ".type __ia2_int_upsample, @function\n" \
    "__ia2_int_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call int_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_int_upsample, .-__ia2_int_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noop_upsample \
asm(\
    /* Wrapper for noop_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noop_upsample\n" \
    ".type __ia2_noop_upsample, @function\n" \
    "__ia2_noop_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noop_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noop_upsample, .-__ia2_noop_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noop_upsample \
asm(\
    /* Wrapper for noop_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noop_upsample\n" \
    ".type __ia2_noop_upsample, @function\n" \
    "__ia2_noop_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noop_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noop_upsample, .-__ia2_noop_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_noop_upsample \
asm(\
    /* Wrapper for noop_upsample(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_noop_upsample\n" \
    ".type __ia2_noop_upsample, @function\n" \
    "__ia2_noop_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call noop_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_noop_upsample, .-__ia2_noop_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_sep_upsample \
asm(\
    /* Wrapper for sep_upsample(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_sep_upsample\n" \
    ".type __ia2_sep_upsample, @function\n" \
    "__ia2_sep_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call sep_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_sep_upsample, .-__ia2_sep_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_sep_upsample \
asm(\
    /* Wrapper for sep_upsample(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_sep_upsample\n" \
    ".type __ia2_sep_upsample, @function\n" \
    "__ia2_sep_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call sep_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_sep_upsample, .-__ia2_sep_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_sep_upsample \
asm(\
    /* Wrapper for sep_upsample(int, int, int, int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_sep_upsample\n" \
    ".type __ia2_sep_upsample, @function\n" \
    "__ia2_sep_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Copy stack arguments from the caller's stack to the compartment */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r12\n" \
    "movq %fs:(%r12), %rax\n" \
    "pushq 56(%rax)\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call sep_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_sep_upsample, .-__ia2_sep_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_upsample \
asm(\
    /* Wrapper for start_pass_upsample(int): */ \
    ".text\n" \
    ".local __ia2_start_pass_upsample\n" \
    ".type __ia2_start_pass_upsample, @function\n" \
    "__ia2_start_pass_upsample:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_upsample\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_upsample, .-__ia2_start_pass_upsample\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_emit_message \
asm(\
    /* Wrapper for emit_message(int, int): */ \
    ".text\n" \
    ".local __ia2_emit_message\n" \
    ".type __ia2_emit_message, @function\n" \
    "__ia2_emit_message:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call emit_message\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_emit_message, .-__ia2_emit_message\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_error_exit \
asm(\
    /* Wrapper for error_exit(int): */ \
    ".text\n" \
    ".local __ia2_error_exit\n" \
    ".type __ia2_error_exit, @function\n" \
    "__ia2_error_exit:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call error_exit\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_error_exit, .-__ia2_error_exit\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_format_message \
asm(\
    /* Wrapper for format_message(int, int): */ \
    ".text\n" \
    ".local __ia2_format_message\n" \
    ".type __ia2_format_message, @function\n" \
    "__ia2_format_message:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call format_message\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_format_message, .-__ia2_format_message\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_output_message \
asm(\
    /* Wrapper for output_message(int): */ \
    ".text\n" \
    ".local __ia2_output_message\n" \
    ".type __ia2_output_message, @function\n" \
    "__ia2_output_message:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call output_message\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_output_message, .-__ia2_output_message\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_reset_error_mgr \
asm(\
    /* Wrapper for reset_error_mgr(int): */ \
    ".text\n" \
    ".local __ia2_reset_error_mgr\n" \
    ".type __ia2_reset_error_mgr, @function\n" \
    "__ia2_reset_error_mgr:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call reset_error_mgr\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_reset_error_mgr, .-__ia2_reset_error_mgr\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_access_virt_barray \
asm(\
    /* Wrapper for access_virt_barray(int, int, int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_access_virt_barray\n" \
    ".type __ia2_access_virt_barray, @function\n" \
    "__ia2_access_virt_barray:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call access_virt_barray\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_access_virt_barray, .-__ia2_access_virt_barray\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_access_virt_sarray \
asm(\
    /* Wrapper for access_virt_sarray(int, int, int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_access_virt_sarray\n" \
    ".type __ia2_access_virt_sarray, @function\n" \
    "__ia2_access_virt_sarray:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call access_virt_sarray\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_access_virt_sarray, .-__ia2_access_virt_sarray\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_alloc_barray \
asm(\
    /* Wrapper for alloc_barray(int, int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_alloc_barray\n" \
    ".type __ia2_alloc_barray, @function\n" \
    "__ia2_alloc_barray:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call alloc_barray\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_alloc_barray, .-__ia2_alloc_barray\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_alloc_large \
asm(\
    /* Wrapper for alloc_large(int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_alloc_large\n" \
    ".type __ia2_alloc_large, @function\n" \
    "__ia2_alloc_large:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call alloc_large\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_alloc_large, .-__ia2_alloc_large\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_alloc_sarray \
asm(\
    /* Wrapper for alloc_sarray(int, int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_alloc_sarray\n" \
    ".type __ia2_alloc_sarray, @function\n" \
    "__ia2_alloc_sarray:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call alloc_sarray\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_alloc_sarray, .-__ia2_alloc_sarray\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_alloc_small \
asm(\
    /* Wrapper for alloc_small(int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_alloc_small\n" \
    ".type __ia2_alloc_small, @function\n" \
    "__ia2_alloc_small:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call alloc_small\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_alloc_small, .-__ia2_alloc_small\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_free_pool \
asm(\
    /* Wrapper for free_pool(int, int): */ \
    ".text\n" \
    ".local __ia2_free_pool\n" \
    ".type __ia2_free_pool, @function\n" \
    "__ia2_free_pool:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call free_pool\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_free_pool, .-__ia2_free_pool\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_realize_virt_arrays \
asm(\
    /* Wrapper for realize_virt_arrays(int): */ \
    ".text\n" \
    ".local __ia2_realize_virt_arrays\n" \
    ".type __ia2_realize_virt_arrays, @function\n" \
    "__ia2_realize_virt_arrays:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call realize_virt_arrays\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_realize_virt_arrays, .-__ia2_realize_virt_arrays\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_request_virt_barray \
asm(\
    /* Wrapper for request_virt_barray(int, int, int, int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_request_virt_barray\n" \
    ".type __ia2_request_virt_barray, @function\n" \
    "__ia2_request_virt_barray:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call request_virt_barray\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_request_virt_barray, .-__ia2_request_virt_barray\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_request_virt_sarray \
asm(\
    /* Wrapper for request_virt_sarray(int, int, int, int, int, int) -> int: */ \
    ".text\n" \
    ".local __ia2_request_virt_sarray\n" \
    ".type __ia2_request_virt_sarray, @function\n" \
    "__ia2_request_virt_sarray:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call request_virt_sarray\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Preserve essential regs on stack */ \
    "pushq %rax\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Restore preserved regs */ \
    "popq %rax\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_request_virt_sarray, .-__ia2_request_virt_sarray\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_self_destruct \
asm(\
    /* Wrapper for self_destruct(int): */ \
    ".text\n" \
    ".local __ia2_self_destruct\n" \
    ".type __ia2_self_destruct, @function\n" \
    "__ia2_self_destruct:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call self_destruct\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_self_destruct, .-__ia2_self_destruct\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_color_quantize \
asm(\
    /* Wrapper for color_quantize(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_color_quantize\n" \
    ".type __ia2_color_quantize, @function\n" \
    "__ia2_color_quantize:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call color_quantize\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_color_quantize, .-__ia2_color_quantize\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_color_quantize \
asm(\
    /* Wrapper for color_quantize(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_color_quantize\n" \
    ".type __ia2_color_quantize, @function\n" \
    "__ia2_color_quantize:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call color_quantize\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_color_quantize, .-__ia2_color_quantize\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_color_quantize3 \
asm(\
    /* Wrapper for color_quantize3(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_color_quantize3\n" \
    ".type __ia2_color_quantize3, @function\n" \
    "__ia2_color_quantize3:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call color_quantize3\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_color_quantize3, .-__ia2_color_quantize3\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_color_quantize3 \
asm(\
    /* Wrapper for color_quantize3(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_color_quantize3\n" \
    ".type __ia2_color_quantize3, @function\n" \
    "__ia2_color_quantize3:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call color_quantize3\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_color_quantize3, .-__ia2_color_quantize3\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_pass_1_quant \
asm(\
    /* Wrapper for finish_pass_1_quant(int): */ \
    ".text\n" \
    ".local __ia2_finish_pass_1_quant\n" \
    ".type __ia2_finish_pass_1_quant, @function\n" \
    "__ia2_finish_pass_1_quant:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_pass_1_quant\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_pass_1_quant, .-__ia2_finish_pass_1_quant\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_new_color_map_1_quant \
asm(\
    /* Wrapper for new_color_map_1_quant(int): */ \
    ".text\n" \
    ".local __ia2_new_color_map_1_quant\n" \
    ".type __ia2_new_color_map_1_quant, @function\n" \
    "__ia2_new_color_map_1_quant:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call new_color_map_1_quant\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_new_color_map_1_quant, .-__ia2_new_color_map_1_quant\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_quantize3_ord_dither \
asm(\
    /* Wrapper for quantize3_ord_dither(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_quantize3_ord_dither\n" \
    ".type __ia2_quantize3_ord_dither, @function\n" \
    "__ia2_quantize3_ord_dither:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call quantize3_ord_dither\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_quantize3_ord_dither, .-__ia2_quantize3_ord_dither\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_quantize3_ord_dither \
asm(\
    /* Wrapper for quantize3_ord_dither(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_quantize3_ord_dither\n" \
    ".type __ia2_quantize3_ord_dither, @function\n" \
    "__ia2_quantize3_ord_dither:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call quantize3_ord_dither\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_quantize3_ord_dither, .-__ia2_quantize3_ord_dither\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_quantize_fs_dither \
asm(\
    /* Wrapper for quantize_fs_dither(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_quantize_fs_dither\n" \
    ".type __ia2_quantize_fs_dither, @function\n" \
    "__ia2_quantize_fs_dither:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call quantize_fs_dither\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_quantize_fs_dither, .-__ia2_quantize_fs_dither\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_quantize_fs_dither \
asm(\
    /* Wrapper for quantize_fs_dither(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_quantize_fs_dither\n" \
    ".type __ia2_quantize_fs_dither, @function\n" \
    "__ia2_quantize_fs_dither:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call quantize_fs_dither\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_quantize_fs_dither, .-__ia2_quantize_fs_dither\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_quantize_ord_dither \
asm(\
    /* Wrapper for quantize_ord_dither(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_quantize_ord_dither\n" \
    ".type __ia2_quantize_ord_dither, @function\n" \
    "__ia2_quantize_ord_dither:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call quantize_ord_dither\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_quantize_ord_dither, .-__ia2_quantize_ord_dither\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_quantize_ord_dither \
asm(\
    /* Wrapper for quantize_ord_dither(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_quantize_ord_dither\n" \
    ".type __ia2_quantize_ord_dither, @function\n" \
    "__ia2_quantize_ord_dither:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call quantize_ord_dither\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_quantize_ord_dither, .-__ia2_quantize_ord_dither\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_1_quant \
asm(\
    /* Wrapper for start_pass_1_quant(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_1_quant\n" \
    ".type __ia2_start_pass_1_quant, @function\n" \
    "__ia2_start_pass_1_quant:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_1_quant\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_1_quant, .-__ia2_start_pass_1_quant\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_pass1 \
asm(\
    /* Wrapper for finish_pass1(int): */ \
    ".text\n" \
    ".local __ia2_finish_pass1\n" \
    ".type __ia2_finish_pass1, @function\n" \
    "__ia2_finish_pass1:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_pass1\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_pass1, .-__ia2_finish_pass1\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_finish_pass2 \
asm(\
    /* Wrapper for finish_pass2(int): */ \
    ".text\n" \
    ".local __ia2_finish_pass2\n" \
    ".type __ia2_finish_pass2, @function\n" \
    "__ia2_finish_pass2:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call finish_pass2\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_finish_pass2, .-__ia2_finish_pass2\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_new_color_map_2_quant \
asm(\
    /* Wrapper for new_color_map_2_quant(int): */ \
    ".text\n" \
    ".local __ia2_new_color_map_2_quant\n" \
    ".type __ia2_new_color_map_2_quant, @function\n" \
    "__ia2_new_color_map_2_quant:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call new_color_map_2_quant\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_new_color_map_2_quant, .-__ia2_new_color_map_2_quant\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_pass2_fs_dither \
asm(\
    /* Wrapper for pass2_fs_dither(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_pass2_fs_dither\n" \
    ".type __ia2_pass2_fs_dither, @function\n" \
    "__ia2_pass2_fs_dither:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call pass2_fs_dither\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_pass2_fs_dither, .-__ia2_pass2_fs_dither\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_pass2_fs_dither \
asm(\
    /* Wrapper for pass2_fs_dither(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_pass2_fs_dither\n" \
    ".type __ia2_pass2_fs_dither, @function\n" \
    "__ia2_pass2_fs_dither:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call pass2_fs_dither\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_pass2_fs_dither, .-__ia2_pass2_fs_dither\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_pass2_no_dither \
asm(\
    /* Wrapper for pass2_no_dither(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_pass2_no_dither\n" \
    ".type __ia2_pass2_no_dither, @function\n" \
    "__ia2_pass2_no_dither:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call pass2_no_dither\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_pass2_no_dither, .-__ia2_pass2_no_dither\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_pass2_no_dither \
asm(\
    /* Wrapper for pass2_no_dither(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_pass2_no_dither\n" \
    ".type __ia2_pass2_no_dither, @function\n" \
    "__ia2_pass2_no_dither:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call pass2_no_dither\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_pass2_no_dither, .-__ia2_pass2_no_dither\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_prescan_quantize \
asm(\
    /* Wrapper for prescan_quantize(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_prescan_quantize\n" \
    ".type __ia2_prescan_quantize, @function\n" \
    "__ia2_prescan_quantize:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call prescan_quantize\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_prescan_quantize, .-__ia2_prescan_quantize\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_prescan_quantize \
asm(\
    /* Wrapper for prescan_quantize(int, int, int, int): */ \
    ".text\n" \
    ".local __ia2_prescan_quantize\n" \
    ".type __ia2_prescan_quantize, @function\n" \
    "__ia2_prescan_quantize:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call prescan_quantize\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_prescan_quantize, .-__ia2_prescan_quantize\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_start_pass_2_quant \
asm(\
    /* Wrapper for start_pass_2_quant(int, int): */ \
    ".text\n" \
    ".local __ia2_start_pass_2_quant\n" \
    ".type __ia2_start_pass_2_quant, @function\n" \
    "__ia2_start_pass_2_quant:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call start_pass_2_quant\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_start_pass_2_quant, .-__ia2_start_pass_2_quant\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_DefaultPercentLengthToAppUnits \
asm(\
    /* Wrapper for DefaultPercentLengthToAppUnits(): */ \
    ".text\n" \
    ".local __ia2_DefaultPercentLengthToAppUnits\n" \
    ".type __ia2_DefaultPercentLengthToAppUnits, @function\n" \
    "__ia2_DefaultPercentLengthToAppUnits:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call DefaultPercentLengthToAppUnits\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_DefaultPercentLengthToAppUnits, .-__ia2_DefaultPercentLengthToAppUnits\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_FixedSizeEntryMover \
asm(\
    /* Wrapper for FixedSizeEntryMover(): */ \
    ".text\n" \
    ".local __ia2_FixedSizeEntryMover\n" \
    ".type __ia2_FixedSizeEntryMover, @function\n" \
    "__ia2_FixedSizeEntryMover:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call FixedSizeEntryMover\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_FixedSizeEntryMover, .-__ia2_FixedSizeEntryMover\n" \
    ".previous\n" \
);
#define IA2_DEFINE_WRAPPER_SearchGray \
asm(\
    /* Wrapper for SearchGray(): */ \
    ".text\n" \
    ".local __ia2_SearchGray\n" \
    ".type __ia2_SearchGray, @function\n" \
    "__ia2_SearchGray:\n" \
    "pushq %rbp\n" \
    "movq %rsp, %rbp\n" \
    "pushq %rbx\n" \
    "pushq %r12\n" \
    "pushq %r13\n" \
    "pushq %r14\n" \
    "pushq %r15\n" \
    ASSERT_PKRU(0xfffffffffffffffc) "\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    "subq $8, %rsp\n" \
    /* Set PKRU to the compartment's value */ \
    "movq %rcx, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rcx\n" \
    "movq %r11, %rdx\n" \
    /* Call wrapped function */ \
    "call SearchGray\n" \
    /* Set PKRU to the intermediate value to move arguments */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffff0, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    /* Free stack space used for stack args */ \
    "addq $8, %rsp\n" \
    /* Compute location to save old stack pointer (using r11) */ \
    "mov ia2_stackptr_1@GOTTPOFF(%rip), %r11\n" \
    /* Write the old stack pointer to memory */ \
    "movq %rsp, %fs:(%r11)\n" \
    /* Compute location to load new stack pointer (using r11) */ \
    "mov ia2_stackptr_0@GOTTPOFF(%rip), %r11\n" \
    /* Read the new stack pointer from memory */ \
    "movq %fs:(%r11), %rsp\n" \
    /* Scrub non-essential regs */ \
    "call __libia2_scrub_registers\n" \
    /* Set PKRU to the caller's value */ \
    "movq %rax, %r10\n" \
    "movq %rdx, %r11\n" \
    "xorl %ecx, %ecx\n" \
    "xorl %edx, %edx\n" \
    "movl $0xfffffffc, %eax\n" \
    "wrpkru\n" \
    "movq %r10, %rax\n" \
    "movq %r11, %rdx\n" \
    "popq %r15\n" \
    "popq %r14\n" \
    "popq %r13\n" \
    "popq %r12\n" \
    "popq %rbx\n" \
    "popq %rbp\n" \
    /* Return to the caller */ \
    "ret\n" \
    ".size __ia2_SearchGray, .-__ia2_SearchGray\n" \
    ".previous\n" \
);

#endif
